var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"Copy_of_jiemeikang/FOC_Model","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"主文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"FOC_Model.h\"                 /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  FOC_Model_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  FOC_Model_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.0001 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(rtM) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"FOC_Model.c","type":"source","group":"model","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: FOC_Model.c\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"FOC_Model.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"FOC_Model_private.h\"\r\n#include <math.h>\r\n#include \"SVPWM.h\"\r\n#include \"FLUX_OB.h\"\r\n#include \"idq_Controller.h\"\r\n#include \"SMO_LPF.h\"\r\n\r\n/* Named constants for Chart: '<S2>/Chart1' */\r\n#define IN_AlignStage                  ((uint8_T)1U)\r\n#define IN_IDLE                        ((uint8_T)2U)\r\n#define IN_OpenStage                   ((uint8_T)3U)\r\n#define IN_RunStage                    ((uint8_T)4U)\r\n#define IN_ThetaAlign                  ((uint8_T)5U)\r\n\r\n/* Exported data definition */\r\n\r\n/* Definition for custom storage class: Struct */\r\nFLU_OBS_type FLU_OBS = {\r\n  /* FLU */\r\n  1.0E+6F\r\n};\r\n\r\nJIE_MEI_KANG_PARAMETE_type JIE_MEI_KANG_PARAMETE = {\r\n  /* FLUX */\r\n  0.0055F\r\n};\r\n\r\nJIE_MEI_KANG_PARAMETER_type JIE_MEI_KANG_PARAMETER = {\r\n  /* L */\r\n  0.00062F,\r\n\r\n  /* Pn */\r\n  4.0F,\r\n\r\n  /* Rs */\r\n  0.89F\r\n};\r\n\r\nMID_parameter_type MID_parameter;\r\nTp_loop_type Tp_loop = {\r\n  /* T */\r\n  0.0001F\r\n};\r\n\r\ncurr_kpki_type curr_kpki = {\r\n  /* curr_d_ki */\r\n  100.0F,\r\n\r\n  /* curr_d_kp */\r\n  0.1F\r\n};\r\n\r\nspd_kpki_type spd_kpki = {\r\n  /* spd_ki */\r\n  0.001F,\r\n\r\n  /* spd_kp */\r\n  0.0005F\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\nstatic void rate_scheduler(void);\r\n\r\n/*\r\n *         This function updates active task flag for each subrate.\r\n *         The function is called at model base rate, hence the\r\n *         generated code self-manages all its subrates.\r\n */\r\nstatic void rate_scheduler(void)\r\n{\r\n  /* Compute which subrates run during the next base time step.  Subrates\r\n   * are an integer multiple of the base rate counter.  Therefore, the subtask\r\n   * counter is reset when it reaches its limit (zero means run).\r\n   */\r\n  (rtM->Timing.TaskCounters.TID[1])++;\r\n  if ((rtM->Timing.TaskCounters.TID[1]) > 9) {/* Sample time: [0.001s, 0.0s] */\r\n    rtM->Timing.TaskCounters.TID[1] = 0;\r\n  }\r\n}\r\n\r\n/* Output and update for atomic system: '<S2>/Clark' */\r\nvoid Clark(real32_T rtu_ia, real32_T rtu_ib, real32_T rtu_ic)\r\n{\r\n  /* Sum: '<S7>/Add1' incorporates:\r\n   *  Gain: '<S7>/Gain'\r\n   *  Gain: '<S7>/Gain1'\r\n   *  Sum: '<S7>/Add'\r\n   */\r\n  MID_parameter.ialpha = 0.666666687F * rtu_ia - (rtu_ib + rtu_ic) *\r\n    0.333333343F;\r\n\r\n  /* Gain: '<S7>/Gain2' incorporates:\r\n   *  Sum: '<S7>/Add2'\r\n   */\r\n  MID_parameter.ibeta = (rtu_ib - rtu_ic) * 0.577350259F;\r\n}\r\n\r\n/* Output and update for atomic system: '<S2>/In_park' */\r\nvoid In_park(real32_T rtu_ud, real32_T rtu_uq, real32_T rtu_theta_sin, real32_T\r\n             rtu_theta_cos)\r\n{\r\n  /* Sum: '<S14>/Add' incorporates:\r\n   *  Product: '<S14>/Product'\r\n   *  Product: '<S14>/Product1'\r\n   */\r\n  MID_parameter.ualpha = rtu_ud * rtu_theta_cos - rtu_uq * rtu_theta_sin;\r\n\r\n  /* Sum: '<S14>/Add1' incorporates:\r\n   *  Product: '<S14>/Product2'\r\n   *  Product: '<S14>/Product3'\r\n   */\r\n  MID_parameter.ubeta = rtu_ud * rtu_theta_sin + rtu_uq * rtu_theta_cos;\r\n}\r\n\r\n/* Output and update for atomic system: '<S2>/Park' */\r\nvoid Park(real32_T rtu_ialpha, real32_T rtu_ibeta, real32_T rtu_theta_sin,\r\n          real32_T rtu_theta_cos, real32_T *rty_id, real32_T *rty_iq)\r\n{\r\n  /* Sum: '<S15>/Add' incorporates:\r\n   *  Product: '<S15>/Product'\r\n   *  Product: '<S15>/Product1'\r\n   */\r\n  *rty_id = rtu_ialpha * rtu_theta_cos + rtu_ibeta * rtu_theta_sin;\r\n\r\n  /* Sum: '<S15>/Add1' incorporates:\r\n   *  Product: '<S15>/Product2'\r\n   *  Product: '<S15>/Product3'\r\n   */\r\n  *rty_iq = rtu_ibeta * rtu_theta_cos - rtu_ialpha * rtu_theta_sin;\r\n}\r\n\r\n/* System initialize for atomic system: '<S1>/Curr_loop' */\r\nvoid Curr_loop_Init(real32_T *rty_RestsSingal, DW_Curr_loop *localDW)\r\n{\r\n  /* SystemInitialize for Chart: '<S2>/Chart1' */\r\n  *rty_RestsSingal = 0.0F;\r\n\r\n  /* SystemInitialize for IfAction SubSystem: '<S2>/If Action Subsystem2' */\r\n  /* InitializeConditions for DiscreteIntegrator: '<S11>/Discrete-Time Integrator' */\r\n  localDW->DiscreteTimeIntegrator_PrevRese = 2;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S11>/Discrete-Time Integrator1' */\r\n  localDW->DiscreteTimeIntegrator1_PrevRes = 2;\r\n\r\n  /* End of SystemInitialize for SubSystem: '<S2>/If Action Subsystem2' */\r\n}\r\n\r\n/* Output and update for atomic system: '<S1>/Curr_loop' */\r\nvoid Curr_loop(real32_T rtu_ia, real32_T rtu_ib, real32_T rtu_ic, real_T\r\n               rtu_MotorOnOff, real32_T rtu_iq_ref, real32_T rtu_VDC, real32_T\r\n               rtyyy_Tcmp1Tcmp2Tcmp3[3], real32_T *rty_RestsSingal, DW_Curr_loop\r\n               *localDW)\r\n{\r\n  real32_T rtb_Add_h;\r\n  real32_T rtb_DiscreteTimeIntegrator;\r\n  real32_T rtb_Saturation;\r\n  real32_T rtb_Saturation_h;\r\n\r\n  /* Chart: '<S2>/Chart1' */\r\n  if (localDW->temporalCounter_i1 < 16383) {\r\n    localDW->temporalCounter_i1++;\r\n  }\r\n\r\n  if (localDW->is_active_c7_FOC_Model == 0) {\r\n    localDW->is_active_c7_FOC_Model = 1U;\r\n    localDW->is_c7_FOC_Model = IN_IDLE;\r\n  } else {\r\n    switch (localDW->is_c7_FOC_Model) {\r\n     case IN_AlignStage:\r\n      if (localDW->temporalCounter_i1 >= 1000) {\r\n        localDW->temporalCounter_i1 = 0U;\r\n        localDW->is_c7_FOC_Model = IN_OpenStage;\r\n        localDW->ZReset = 0.0F;\r\n        localDW->cnt = 0.0F;\r\n      } else if (rtu_MotorOnOff == 0.0) {\r\n        localDW->is_c7_FOC_Model = IN_IDLE;\r\n      } else {\r\n        MID_parameter.state = 2.0F;\r\n        *rty_RestsSingal = 0.0F;\r\n      }\r\n      break;\r\n\r\n     case IN_IDLE:\r\n      if (rtu_MotorOnOff == 1.0) {\r\n        localDW->temporalCounter_i1 = 0U;\r\n        localDW->is_c7_FOC_Model = IN_AlignStage;\r\n      } else {\r\n        MID_parameter.state = 1.0F;\r\n        *rty_RestsSingal = 0.0F;\r\n      }\r\n      break;\r\n\r\n     case IN_OpenStage:\r\n      if (rtu_MotorOnOff == 0.0) {\r\n        localDW->is_c7_FOC_Model = IN_IDLE;\r\n      } else if (localDW->temporalCounter_i1 >= 10000) {\r\n        localDW->temporalCounter_i1 = 0U;\r\n        localDW->is_c7_FOC_Model = IN_ThetaAlign;\r\n      } else {\r\n        if (localDW->cnt == 1.0F) {\r\n          localDW->ZReset = 1.0F;\r\n        }\r\n\r\n        localDW->cnt = 1.0F;\r\n        MID_parameter.state = 3.0F;\r\n        *rty_RestsSingal = 0.0F;\r\n      }\r\n      break;\r\n\r\n     case IN_RunStage:\r\n      if (rtu_MotorOnOff == 0.0) {\r\n        localDW->is_c7_FOC_Model = IN_IDLE;\r\n      } else {\r\n        MID_parameter.state = 4.0F;\r\n        *rty_RestsSingal = 0.0F;\r\n      }\r\n      break;\r\n\r\n     default:\r\n      /* case IN_ThetaAlign: */\r\n      if (localDW->temporalCounter_i1 >= 5000) {\r\n        localDW->is_c7_FOC_Model = IN_RunStage;\r\n      } else {\r\n        MID_parameter.state = 4.0F;\r\n        *rty_RestsSingal = 0.0F;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  /* End of Chart: '<S2>/Chart1' */\r\n\r\n  /* SwitchCase: '<S2>/Switch Case1' */\r\n  switch ((int32_T)MID_parameter.state) {\r\n   case 1:\r\n    /* Outputs for IfAction SubSystem: '<S2>/If Action Subsystem' incorporates:\r\n     *  ActionPort: '<S9>/Action Port'\r\n     */\r\n    /* Merge: '<S2>/Merge' incorporates:\r\n     *  Constant: '<S9>/Constant'\r\n     *  SignalConversion generated from: '<S9>/theta_fd'\r\n     */\r\n    localDW->Merge = 0.0F;\r\n\r\n    /* Merge: '<S2>/Merge1' incorporates:\r\n     *  Constant: '<S9>/Constant1'\r\n     *  SignalConversion generated from: '<S9>/iq_ref'\r\n     */\r\n    localDW->Merge1 = 0.0F;\r\n\r\n    /* End of Outputs for SubSystem: '<S2>/If Action Subsystem' */\r\n    break;\r\n\r\n   case 2:\r\n    /* Outputs for IfAction SubSystem: '<S2>/If Action Subsystem1' incorporates:\r\n     *  ActionPort: '<S10>/Action Port'\r\n     */\r\n    /* Merge: '<S2>/Merge' incorporates:\r\n     *  Constant: '<S10>/Constant'\r\n     *  SignalConversion generated from: '<S10>/theta_fd'\r\n     */\r\n    localDW->Merge = 0.0F;\r\n\r\n    /* Merge: '<S2>/Merge1' incorporates:\r\n     *  Constant: '<S10>/Constant1'\r\n     *  SignalConversion generated from: '<S10>/iq_ref'\r\n     */\r\n    localDW->Merge1 = 0.5F;\r\n\r\n    /* End of Outputs for SubSystem: '<S2>/If Action Subsystem1' */\r\n    break;\r\n\r\n   case 3:\r\n    /* Outputs for IfAction SubSystem: '<S2>/If Action Subsystem2' incorporates:\r\n     *  ActionPort: '<S11>/Action Port'\r\n     */\r\n    /* DiscreteIntegrator: '<S11>/Discrete-Time Integrator' */\r\n    if ((localDW->ZReset > 0.0F) && (localDW->DiscreteTimeIntegrator_PrevRese <=\r\n         0)) {\r\n      localDW->DiscreteTimeIntegrator_DSTATE = 0.0F;\r\n    }\r\n\r\n    rtb_DiscreteTimeIntegrator = localDW->DiscreteTimeIntegrator_DSTATE;\r\n\r\n    /* End of DiscreteIntegrator: '<S11>/Discrete-Time Integrator' */\r\n\r\n    /* DiscreteIntegrator: '<S11>/Discrete-Time Integrator1' */\r\n    if ((localDW->ZReset > 0.0F) && (localDW->DiscreteTimeIntegrator1_PrevRes <=\r\n         0)) {\r\n      localDW->DiscreteTimeIntegrator1_DSTAT_j = 0.0F;\r\n    }\r\n\r\n    /* Merge: '<S2>/Merge' incorporates:\r\n     *  DiscreteIntegrator: '<S11>/Discrete-Time Integrator1'\r\n     *  SignalConversion generated from: '<S11>/theta_fd'\r\n     */\r\n    localDW->Merge = localDW->DiscreteTimeIntegrator1_DSTAT_j;\r\n\r\n    /* Merge: '<S2>/Merge1' incorporates:\r\n     *  Constant: '<S11>/Constant2'\r\n     *  SignalConversion generated from: '<S11>/iq_ref'\r\n     */\r\n    localDW->Merge1 = 0.5F;\r\n\r\n    /* Update for DiscreteIntegrator: '<S11>/Discrete-Time Integrator' incorporates:\r\n     *  Constant: '<S2>/Constant'\r\n     *  DiscreteIntegrator: '<S11>/Discrete-Time Integrator1'\r\n     *  Gain: '<S11>/Gain'\r\n     *  Gain: '<S11>/Gain1'\r\n     */\r\n    localDW->DiscreteTimeIntegrator_DSTATE += JIE_MEI_KANG_PARAMETER.Pn *\r\n      31.4159279F * 0.0001F;\r\n    if (localDW->ZReset > 0.0F) {\r\n      localDW->DiscreteTimeIntegrator_PrevRese = 1;\r\n      localDW->DiscreteTimeIntegrator1_PrevRes = 1;\r\n    } else if (localDW->ZReset < 0.0F) {\r\n      localDW->DiscreteTimeIntegrator_PrevRese = -1;\r\n      localDW->DiscreteTimeIntegrator1_PrevRes = -1;\r\n    } else if (localDW->ZReset == 0.0F) {\r\n      localDW->DiscreteTimeIntegrator_PrevRese = 0;\r\n      localDW->DiscreteTimeIntegrator1_PrevRes = 0;\r\n    } else {\r\n      localDW->DiscreteTimeIntegrator_PrevRese = 2;\r\n      localDW->DiscreteTimeIntegrator1_PrevRes = 2;\r\n    }\r\n\r\n    /* End of Update for DiscreteIntegrator: '<S11>/Discrete-Time Integrator' */\r\n\r\n    /* Update for DiscreteIntegrator: '<S11>/Discrete-Time Integrator1' */\r\n    localDW->DiscreteTimeIntegrator1_DSTAT_j += 0.0001F *\r\n      rtb_DiscreteTimeIntegrator;\r\n\r\n    /* End of Outputs for SubSystem: '<S2>/If Action Subsystem2' */\r\n    break;\r\n\r\n   case 4:\r\n    /* Outputs for IfAction SubSystem: '<S2>/If Action Subsystem4' incorporates:\r\n     *  ActionPort: '<S13>/Action Port'\r\n     */\r\n    /* If: '<S13>/If' incorporates:\r\n     *  Constant: '<S13>/Constant1'\r\n     *  Constant: '<S13>/Constant2'\r\n     *  Constant: '<S13>/Constant4'\r\n     *  Constant: '<S77>/Constant'\r\n     *  Merge: '<S2>/Merge1'\r\n     *  Product: '<S13>/Product1'\r\n     *  SignalConversion generated from: '<S77>/Out1'\r\n     *  Sum: '<S13>/Add'\r\n     *  Sum: '<S13>/Add4'\r\n     *  UnitDelay: '<S13>/Unit Delay'\r\n     */\r\n    if (localDW->UnitDelay_DSTATE + 0.01F >= 1.0F) {\r\n      /* Outputs for IfAction SubSystem: '<S13>/If Action Subsystem' incorporates:\r\n       *  ActionPort: '<S77>/Action Port'\r\n       */\r\n      rtb_DiscreteTimeIntegrator = 1.0F;\r\n\r\n      /* End of Outputs for SubSystem: '<S13>/If Action Subsystem' */\r\n    } else {\r\n      rtb_DiscreteTimeIntegrator = localDW->UnitDelay_DSTATE + 0.01F;\r\n    }\r\n\r\n    localDW->Merge1 = 0.5F - rtb_DiscreteTimeIntegrator * 0.2F;\r\n\r\n    /* End of If: '<S13>/If' */\r\n\r\n    /* Merge: '<S2>/Merge' incorporates:\r\n     *  DiscreteIntegrator: '<S13>/Discrete-Time Integrator1'\r\n     */\r\n    localDW->Merge = localDW->DiscreteTimeIntegrator1_DSTATE;\r\n\r\n    /* Update for UnitDelay: '<S13>/Unit Delay' incorporates:\r\n     *  Constant: '<S13>/Constant1'\r\n     *  Sum: '<S13>/Add'\r\n     */\r\n    localDW->UnitDelay_DSTATE += 0.01F;\r\n\r\n    /* Update for DiscreteIntegrator: '<S13>/Discrete-Time Integrator1' incorporates:\r\n     *  Constant: '<S2>/Constant'\r\n     *  Gain: '<S13>/Gain'\r\n     *  Gain: '<S13>/Gain1'\r\n     */\r\n    localDW->DiscreteTimeIntegrator1_DSTATE += JIE_MEI_KANG_PARAMETER.Pn *\r\n      31.4159279F * 0.0001F;\r\n\r\n    /* End of Outputs for SubSystem: '<S2>/If Action Subsystem4' */\r\n    break;\r\n\r\n   case 5:\r\n    /* Outputs for IfAction SubSystem: '<S2>/If Action Subsystem3' incorporates:\r\n     *  ActionPort: '<S12>/Action Port'\r\n     */\r\n    /* Merge: '<S2>/Merge' incorporates:\r\n     *  SignalConversion generated from: '<S12>/theta_Close'\r\n     *  UnitDelay: '<S2>/Unit Delay1'\r\n     */\r\n    localDW->Merge = MID_parameter.THETA;\r\n\r\n    /* Merge: '<S2>/Merge1' incorporates:\r\n     *  SignalConversion generated from: '<S12>/iq_CloseRef'\r\n     */\r\n    localDW->Merge1 = rtu_iq_ref;\r\n\r\n    /* End of Outputs for SubSystem: '<S2>/If Action Subsystem3' */\r\n    break;\r\n  }\r\n\r\n  /* End of SwitchCase: '<S2>/Switch Case1' */\r\n\r\n  /* Math: '<S2>/Mod1' incorporates:\r\n   *  Constant: '<S2>/Constant1'\r\n   */\r\n  rtb_DiscreteTimeIntegrator = rt_modf_snf(localDW->Merge, 6.28318548F);\r\n\r\n  /* Trigonometry: '<S82>/ReplicaOfSource' */\r\n  rtb_Add_h = sinf(rtb_DiscreteTimeIntegrator);\r\n\r\n  /* Trigonometry: '<S81>/ReplicaOfSource' */\r\n  rtb_DiscreteTimeIntegrator = cosf(rtb_DiscreteTimeIntegrator);\r\n\r\n  /* Outputs for Atomic SubSystem: '<S2>/In_park' */\r\n  /* Constant: '<S2>/Constant5' incorporates:\r\n   *  Constant: '<S2>/Constant2'\r\n   *  DataTypeConversion: '<S81>/DTC_output_1'\r\n   *  DataTypeConversion: '<S82>/DTC_output_1'\r\n   */\r\n  In_park(0.0F, 1.0F, rtb_Add_h, rtb_DiscreteTimeIntegrator);\r\n\r\n  /* End of Outputs for SubSystem: '<S2>/In_park' */\r\n\r\n  /* Outputs for Atomic SubSystem: '<S2>/SVPWM' */\r\n  SVPWM(MID_parameter.ualpha, MID_parameter.ubeta, rtu_VDC,\r\n        rtyyy_Tcmp1Tcmp2Tcmp3);\r\n\r\n  /* End of Outputs for SubSystem: '<S2>/SVPWM' */\r\n\r\n  /* Outputs for Atomic SubSystem: '<S2>/Clark' */\r\n  Clark(rtu_ia, rtu_ib, rtu_ic);\r\n\r\n  /* End of Outputs for SubSystem: '<S2>/Clark' */\r\n\r\n  /* Outputs for Atomic SubSystem: '<S2>/FLUX_OB' */\r\n  /* SignalConversion generated from: '<S2>/FLUX_OB' */\r\n  FLUX_OB(MID_parameter.ialpha, MID_parameter.ibeta, MID_parameter.ualpha,\r\n          MID_parameter.ubeta, &(MID_parameter.THETA), &(MID_parameter.wm),\r\n          &localDW->FLUX_OB_k);\r\n\r\n  /* End of Outputs for SubSystem: '<S2>/FLUX_OB' */\r\n\r\n  /* Outputs for Atomic SubSystem: '<S2>/Park' */\r\n  /* DataTypeConversion: '<S82>/DTC_output_1' incorporates:\r\n   *  DataTypeConversion: '<S81>/DTC_output_1'\r\n   */\r\n  Park(MID_parameter.ialpha, MID_parameter.ibeta, rtb_Add_h,\r\n       rtb_DiscreteTimeIntegrator, &rtb_Add_h, &rtb_DiscreteTimeIntegrator);\r\n\r\n  /* End of Outputs for SubSystem: '<S2>/Park' */\r\n\r\n  /* Outputs for Atomic SubSystem: '<S2>/idq_Controller' */\r\n  idq_Controller(rtb_Add_h, rtb_DiscreteTimeIntegrator, localDW->Merge1,\r\n                 &rtb_Saturation_h, &rtb_Saturation, &localDW->idq_Controller_g);\r\n\r\n  /* End of Outputs for SubSystem: '<S2>/idq_Controller' */\r\n}\r\n\r\n/* Model step function */\r\nvoid FOC_Model_step(void)\r\n{\r\n  real32_T rtb_PWM_HalfPeriod[3];\r\n  real32_T Integrator;\r\n  real32_T rtb_DeadZone;\r\n  real32_T rtb_Sum1;\r\n  uint32_T Speed_loop_ELAPS_T;\r\n  int8_T tmp_0;\r\n  int8_T tmp_1;\r\n  boolean_T tmp;\r\n\r\n  /* Outputs for Atomic SubSystem: '<Root>/FOC_Model' */\r\n  /* RateTransition: '<S1>/Rate Transition3' incorporates:\r\n   *  RateTransition: '<S1>/Rate Transition'\r\n   */\r\n  tmp = (rtM->Timing.TaskCounters.TID[1] == 0);\r\n  if (tmp) {\r\n    /* RateTransition: '<S1>/Rate Transition3' */\r\n    rtDW.RateTransition3 = rtDW.RateTransition3_Buffer0;\r\n  }\r\n\r\n  /* End of RateTransition: '<S1>/Rate Transition3' */\r\n\r\n  /* Outputs for Atomic SubSystem: '<S1>/Curr_loop' */\r\n  /* Inport: '<Root>/ia' incorporates:\r\n   *  Inport: '<Root>/MotorOnOff'\r\n   *  Inport: '<Root>/VDC'\r\n   *  Inport: '<Root>/ib'\r\n   *  Inport: '<Root>/ic'\r\n   */\r\n  Curr_loop(rtU.ia, rtU.ib, rtU.ic, rtU.MotorOnOff, rtDW.RateTransition3,\r\n            rtU.VDC, rtb_PWM_HalfPeriod, &rtDW.RestsSingal, &rtDW.Curr_loop_d);\r\n\r\n  /* End of Outputs for SubSystem: '<S1>/Curr_loop' */\r\n\r\n  /* Outputs for Atomic SubSystem: '<S1>/LPF' */\r\n  /* ManualSwitch: '<S1>/Manual Switch' */\r\n  rtb_Sum1 = SMO_LPF(MID_parameter.wm, &rtDW.LPF);\r\n\r\n  /* End of Outputs for SubSystem: '<S1>/LPF' */\r\n\r\n  /* RateTransition: '<S1>/Rate Transition' */\r\n  if (tmp) {\r\n    /* S-Function (fcgen): '<S3>/ReplicaOfSource' incorporates:\r\n     *  SubSystem: '<S1>/Speed_loop'\r\n     */\r\n    if (rtDW.Speed_loop_RESET_ELAPS_T) {\r\n      Speed_loop_ELAPS_T = 0U;\r\n    } else {\r\n      Speed_loop_ELAPS_T = rtM->Timing.clockTick1 - rtDW.Speed_loop_PREV_T;\r\n    }\r\n\r\n    rtDW.Speed_loop_PREV_T = rtM->Timing.clockTick1;\r\n    rtDW.Speed_loop_RESET_ELAPS_T = false;\r\n\r\n    /* Sum: '<S5>/Sum2' incorporates:\r\n     *  Inport: '<Root>/Speed_ref'\r\n     */\r\n    rtb_Sum1 = rtU.Speed_ref - rtb_Sum1;\r\n\r\n    /* DiscreteIntegrator: '<S230>/Integrator' incorporates:\r\n     *  RateTransition: '<S1>/Rate Transition2'\r\n     */\r\n    if (rtDW.Integrator_SYSTEM_ENABLE != 0) {\r\n      /* DiscreteIntegrator: '<S230>/Integrator' */\r\n      Integrator = rtDW.Integrator_DSTATE;\r\n    } else if ((rtDW.RestsSingal > 0.0F) && (rtDW.Integrator_PrevResetState <= 0))\r\n    {\r\n      /* DiscreteIntegrator: '<S230>/Integrator' */\r\n      Integrator = 0.0F;\r\n    } else {\r\n      /* DiscreteIntegrator: '<S230>/Integrator' */\r\n      Integrator = 0.001F * (real32_T)Speed_loop_ELAPS_T\r\n        * rtDW.Integrator_PREV_U + rtDW.Integrator_DSTATE;\r\n    }\r\n\r\n    /* End of DiscreteIntegrator: '<S230>/Integrator' */\r\n\r\n    /* Sum: '<S239>/Sum' incorporates:\r\n     *  Gain: '<S235>/Proportional Gain'\r\n     */\r\n    rtb_DeadZone = spd_kpki.spd_kp * rtb_Sum1 + Integrator;\r\n\r\n    /* Saturate: '<S237>/Saturation' incorporates:\r\n     *  DeadZone: '<S222>/DeadZone'\r\n     */\r\n    if (rtb_DeadZone > 3.0F) {\r\n      /* Update for RateTransition: '<S1>/Rate Transition3' incorporates:\r\n       *  Saturate: '<S237>/Saturation'\r\n       */\r\n      rtDW.RateTransition3_Buffer0 = 3.0F;\r\n      rtb_DeadZone -= 3.0F;\r\n    } else {\r\n      if (rtb_DeadZone < -3.0F) {\r\n        /* Update for RateTransition: '<S1>/Rate Transition3' incorporates:\r\n         *  Saturate: '<S237>/Saturation'\r\n         */\r\n        rtDW.RateTransition3_Buffer0 = -3.0F;\r\n      } else {\r\n        /* Update for RateTransition: '<S1>/Rate Transition3' incorporates:\r\n         *  Saturate: '<S237>/Saturation'\r\n         */\r\n        rtDW.RateTransition3_Buffer0 = rtb_DeadZone;\r\n      }\r\n\r\n      if (rtb_DeadZone >= -3.0F) {\r\n        rtb_DeadZone = 0.0F;\r\n      } else {\r\n        rtb_DeadZone -= -3.0F;\r\n      }\r\n    }\r\n\r\n    /* End of Saturate: '<S237>/Saturation' */\r\n\r\n    /* Gain: '<S227>/Integral Gain' */\r\n    rtb_Sum1 *= spd_kpki.spd_ki;\r\n\r\n    /* Update for DiscreteIntegrator: '<S230>/Integrator' incorporates:\r\n     *  RateTransition: '<S1>/Rate Transition2'\r\n     */\r\n    rtDW.Integrator_SYSTEM_ENABLE = 0U;\r\n    rtDW.Integrator_DSTATE = Integrator;\r\n    if (rtDW.RestsSingal > 0.0F) {\r\n      rtDW.Integrator_PrevResetState = 1;\r\n    } else if (rtDW.RestsSingal < 0.0F) {\r\n      rtDW.Integrator_PrevResetState = -1;\r\n    } else if (rtDW.RestsSingal == 0.0F) {\r\n      rtDW.Integrator_PrevResetState = 0;\r\n    } else {\r\n      rtDW.Integrator_PrevResetState = 2;\r\n    }\r\n\r\n    /* Switch: '<S220>/Switch2' incorporates:\r\n     *  Constant: '<S220>/Clamping_zero'\r\n     *  Constant: '<S220>/Constant3'\r\n     *  Constant: '<S220>/Constant4'\r\n     *  RelationalOperator: '<S220>/fix for DT propagation issue1'\r\n     */\r\n    if (rtb_Sum1 > 0.0F) {\r\n      tmp_0 = 1;\r\n    } else {\r\n      tmp_0 = -1;\r\n    }\r\n\r\n    /* Switch: '<S220>/Switch1' incorporates:\r\n     *  Constant: '<S220>/Clamping_zero'\r\n     *  Constant: '<S220>/Constant'\r\n     *  Constant: '<S220>/Constant2'\r\n     *  RelationalOperator: '<S220>/fix for DT propagation issue'\r\n     */\r\n    if (rtb_DeadZone > 0.0F) {\r\n      tmp_1 = 1;\r\n    } else {\r\n      tmp_1 = -1;\r\n    }\r\n\r\n    /* Switch: '<S220>/Switch' incorporates:\r\n     *  Constant: '<S220>/Clamping_zero'\r\n     *  Logic: '<S220>/AND3'\r\n     *  RelationalOperator: '<S220>/Equal1'\r\n     *  RelationalOperator: '<S220>/Relational Operator'\r\n     *  Switch: '<S220>/Switch1'\r\n     *  Switch: '<S220>/Switch2'\r\n     */\r\n    if ((rtb_DeadZone != 0.0F) && (tmp_1 == tmp_0)) {\r\n      /* Update for DiscreteIntegrator: '<S230>/Integrator' incorporates:\r\n       *  Constant: '<S220>/Constant1'\r\n       */\r\n      rtDW.Integrator_PREV_U = 0.0F;\r\n    } else {\r\n      /* Update for DiscreteIntegrator: '<S230>/Integrator' */\r\n      rtDW.Integrator_PREV_U = rtb_Sum1;\r\n    }\r\n\r\n    /* End of Switch: '<S220>/Switch' */\r\n    /* End of Outputs for S-Function (fcgen): '<S3>/ReplicaOfSource' */\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<Root>/FOC_Model' */\r\n\r\n  /* Outport: '<Root>/Tcmp1' */\r\n  rtY.Tcmp1 = rtb_PWM_HalfPeriod[0];\r\n\r\n  /* Outport: '<Root>/Tcmp2' */\r\n  rtY.Tcmp2 = rtb_PWM_HalfPeriod[1];\r\n\r\n  /* Outport: '<Root>/Tcmp3' */\r\n  rtY.Tcmp3 = rtb_PWM_HalfPeriod[2];\r\n  if (rtM->Timing.TaskCounters.TID[1] == 0) {\r\n    /* Update absolute timer for sample time: [0.001s, 0.0s] */\r\n    /* The \"clockTick1\" counts the number of times the code of this task has\r\n     * been executed. The resolution of this integer timer is 0.001, which is the step size\r\n     * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\r\n     * application lifespan selected.\r\n     */\r\n    rtM->Timing.clockTick1++;\r\n  }\r\n\r\n  rate_scheduler();\r\n}\r\n\r\n/* Model initialize function */\r\nvoid FOC_Model_initialize(void)\r\n{\r\n  /* SystemInitialize for Atomic SubSystem: '<Root>/FOC_Model' */\r\n  /* SystemInitialize for Atomic SubSystem: '<S1>/Curr_loop' */\r\n  Curr_loop_Init(&rtDW.RestsSingal, &rtDW.Curr_loop_d);\r\n\r\n  /* End of SystemInitialize for SubSystem: '<S1>/Curr_loop' */\r\n\r\n  /* SystemInitialize for S-Function (fcgen): '<S3>/ReplicaOfSource' incorporates:\r\n   *  SubSystem: '<S1>/Speed_loop'\r\n   */\r\n  /* InitializeConditions for DiscreteIntegrator: '<S230>/Integrator' */\r\n  rtDW.Integrator_PrevResetState = 2;\r\n\r\n  /* End of SystemInitialize for S-Function (fcgen): '<S3>/ReplicaOfSource' */\r\n  /* End of SystemInitialize for SubSystem: '<Root>/FOC_Model' */\r\n\r\n  /* Enable for Atomic SubSystem: '<Root>/FOC_Model' */\r\n  /* Enable for S-Function (fcgen): '<S3>/ReplicaOfSource' incorporates:\r\n   *  SubSystem: '<S1>/Speed_loop'\r\n   */\r\n  rtDW.Speed_loop_RESET_ELAPS_T = true;\r\n\r\n  /* Enable for DiscreteIntegrator: '<S230>/Integrator' */\r\n  rtDW.Integrator_SYSTEM_ENABLE = 1U;\r\n\r\n  /* End of Enable for S-Function (fcgen): '<S3>/ReplicaOfSource' */\r\n  /* End of Enable for SubSystem: '<Root>/FOC_Model' */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"FOC_Model.h","type":"header","group":"model","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: FOC_Model.h\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef FOC_Model_h_\r\n#define FOC_Model_h_\r\n#ifndef FOC_Model_COMMON_INCLUDES_\r\n#define FOC_Model_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include \"math.h\"\r\n#endif                                 /* FOC_Model_COMMON_INCLUDES_ */\r\n\r\n#include \"FOC_Model_types.h\"\r\n#include \"idq_Controller.h\"\r\n#include \"FLUX_OB.h\"\r\n#include \"SMO_LPF.h\"\r\n#include \"rtGetNaN.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Block signals and states (default storage) for system '<S1>/Curr_loop' */\r\ntypedef struct {\r\n  DW_idq_Controller idq_Controller_g;  /* '<S2>/idq_Controller' */\r\n  DW_FLUX_OB FLUX_OB_k;                /* '<S2>/FLUX_OB' */\r\n  real32_T Merge;                      /* '<S2>/Merge' */\r\n  real32_T Merge1;                     /* '<S2>/Merge1' */\r\n  real32_T ZReset;                     /* '<S2>/Chart1' */\r\n  real32_T UnitDelay_DSTATE;           /* '<S13>/Unit Delay' */\r\n  real32_T DiscreteTimeIntegrator1_DSTATE;/* '<S13>/Discrete-Time Integrator1' */\r\n  real32_T DiscreteTimeIntegrator_DSTATE;/* '<S11>/Discrete-Time Integrator' */\r\n  real32_T DiscreteTimeIntegrator1_DSTAT_j;/* '<S11>/Discrete-Time Integrator1' */\r\n  real32_T cnt;                        /* '<S2>/Chart1' */\r\n  uint16_T temporalCounter_i1;         /* '<S2>/Chart1' */\r\n  int8_T DiscreteTimeIntegrator_PrevRese;/* '<S11>/Discrete-Time Integrator' */\r\n  int8_T DiscreteTimeIntegrator1_PrevRes;/* '<S11>/Discrete-Time Integrator1' */\r\n  uint8_T is_active_c7_FOC_Model;      /* '<S2>/Chart1' */\r\n  uint8_T is_c7_FOC_Model;             /* '<S2>/Chart1' */\r\n} DW_Curr_loop;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  DW_SMO_LPF LPF;                      /* '<S1>/LPF' */\r\n  DW_Curr_loop Curr_loop_d;            /* '<S1>/Curr_loop' */\r\n  real32_T RateTransition3;            /* '<S1>/Rate Transition3' */\r\n  real32_T RestsSingal;                /* '<S2>/Chart1' */\r\n  real32_T Integrator_DSTATE;          /* '<S230>/Integrator' */\r\n  real32_T RateTransition3_Buffer0;    /* '<S1>/Rate Transition3' */\r\n  real32_T Integrator_PREV_U;          /* '<S230>/Integrator' */\r\n  uint32_T Speed_loop_PREV_T;          /* '<S1>/Speed_loop' */\r\n  int8_T Integrator_PrevResetState;    /* '<S230>/Integrator' */\r\n  uint8_T Integrator_SYSTEM_ENABLE;    /* '<S230>/Integrator' */\r\n  boolean_T Speed_loop_RESET_ELAPS_T;  /* '<S1>/Speed_loop' */\r\n} DW;\r\n\r\n/* Constant parameters (default storage) */\r\ntypedef struct {\r\n  /* Pooled Parameter (Mixed Expressions)\r\n   * Referenced by:\r\n   *   '<S10>/Constant1'\r\n   *   '<S11>/Constant2'\r\n   *   '<S13>/Constant2'\r\n   *   '<S16>/Constant'\r\n   *   '<S20>/Gain2'\r\n   */\r\n  real32_T pooled2;\r\n\r\n  /* Pooled Parameter (Mixed Expressions)\r\n   * Referenced by:\r\n   *   '<S16>/PWM_HalfPeriod'\r\n   *   '<S64>/Saturation'\r\n   */\r\n  real32_T pooled4;\r\n\r\n  /* Computed Parameter: Gain_Gain_j\r\n   * Referenced by: '<S16>/Gain'\r\n   */\r\n  real32_T Gain_Gain_j;\r\n} ConstP;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real32_T ia;                         /* '<Root>/ia' */\r\n  real32_T ib;                         /* '<Root>/ib' */\r\n  real32_T ic;                         /* '<Root>/ic' */\r\n  real32_T Speed_ref;                  /* '<Root>/Speed_ref' */\r\n  real_T MotorOnOff;                   /* '<Root>/MotorOnOff' */\r\n  real32_T VDC;                        /* '<Root>/VDC' */\r\n  real32_T Wm;                         /* '<Root>/Wm' */\r\n  real32_T Theta;                      /* '<Root>/Theta' */\r\n} ExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real32_T Tcmp1;                      /* '<Root>/Tcmp1' */\r\n  real32_T Tcmp2;                      /* '<Root>/Tcmp2' */\r\n  real32_T Tcmp3;                      /* '<Root>/Tcmp3' */\r\n} ExtY;\r\n\r\n/* Type definition for custom storage class: Struct */\r\ntypedef struct FLU_OBS_tag {\r\n  real32_T FLU;                        /* Referenced by: '<S20>/Constant1' */\r\n} FLU_OBS_type;\r\n\r\ntypedef struct JIE_MEI_KANG_PARAMETE_tag {\r\n  real32_T FLUX;                       /* Referenced by:\r\n                                        * '<S20>/Constant'\r\n                                        * '<S20>/Gain5'\r\n                                        */\r\n} JIE_MEI_KANG_PARAMETE_type;\r\n\r\ntypedef struct JIE_MEI_KANG_PARAMETER_tag {\r\n  real32_T L;                          /* Referenced by:\r\n                                        * '<S20>/Gain1'\r\n                                        * '<S20>/Gain4'\r\n                                        */\r\n  real32_T Pn;                         /* Referenced by:\r\n                                        * '<S8>/Gain'\r\n                                        * '<S11>/Gain'\r\n                                        * '<S13>/Gain'\r\n                                        */\r\n  real32_T Rs;                         /* Referenced by: '<S20>/Gain' */\r\n} JIE_MEI_KANG_PARAMETER_type;\r\n\r\ntypedef struct MID_parameter_tag {\r\n  real32_T THETA;                      /* '<S2>/FLUX_OB' */\r\n  real32_T wm;                         /* '<S2>/FLUX_OB' */\r\n  real32_T state;                      /* '<S2>/Chart1' */\r\n  real32_T ualpha;                     /* '<S14>/Add' */\r\n  real32_T ubeta;                      /* '<S14>/Add1' */\r\n  real32_T ialpha;                     /* '<S7>/Add1' */\r\n  real32_T ibeta;                      /* '<S7>/Gain2' */\r\n} MID_parameter_type;\r\n\r\ntypedef struct Tp_loop_tag {\r\n  real32_T T;                          /* Referenced by: '<S20>/Gain3' */\r\n} Tp_loop_type;\r\n\r\ntypedef struct curr_kpki_tag {\r\n  real32_T curr_d_ki;                  /* Referenced by: '<S18>/Constant4' */\r\n  real32_T curr_d_kp;                  /* Referenced by: '<S18>/Constant3' */\r\n} curr_kpki_type;\r\n\r\ntypedef struct spd_kpki_tag {\r\n  real32_T spd_ki;                   /* Referenced by: '<S227>/Integral Gain' */\r\n  real32_T spd_kp;               /* Referenced by: '<S235>/Proportional Gain' */\r\n} spd_kpki_type;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T * volatile errorStatus;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick1;\r\n    struct {\r\n      uint8_T TID[2];\r\n    } TaskCounters;\r\n  } Timing;\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/* Constant parameters (default storage) */\r\nextern const ConstP rtConstP;\r\n\r\n/* Model entry point functions */\r\nextern void FOC_Model_initialize(void);\r\nextern void FOC_Model_step(void);\r\n\r\n/* Exported data declaration */\r\n\r\n/* Declaration for custom storage class: Struct */\r\nextern FLU_OBS_type FLU_OBS;\r\nextern JIE_MEI_KANG_PARAMETE_type JIE_MEI_KANG_PARAMETE;\r\nextern JIE_MEI_KANG_PARAMETER_type JIE_MEI_KANG_PARAMETER;\r\nextern MID_parameter_type MID_parameter;\r\nextern Tp_loop_type Tp_loop;\r\nextern curr_kpki_type curr_kpki;\r\nextern spd_kpki_type spd_kpki;\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S19>/Scope' : Unused code path elimination\r\n * Block '<S19>/Scope2' : Unused code path elimination\r\n * Block '<S8>/Scope' : Unused code path elimination\r\n * Block '<S8>/Scope1' : Unused code path elimination\r\n * Block '<S8>/Scope2' : Unused code path elimination\r\n * Block '<S20>/Scope' : Unused code path elimination\r\n * Block '<S20>/Scope2' : Unused code path elimination\r\n * Block '<S11>/Scope' : Unused code path elimination\r\n * Block '<S11>/Scope1' : Unused code path elimination\r\n * Block '<S14>/Scope' : Unused code path elimination\r\n * Block '<S16>/Scope' : Unused code path elimination\r\n * Block '<S2>/Scope' : Unused code path elimination\r\n * Block '<S2>/Scope13' : Unused code path elimination\r\n * Block '<S2>/Scope14' : Unused code path elimination\r\n * Block '<S2>/Scope15' : Unused code path elimination\r\n * Block '<S2>/Scope3' : Unused code path elimination\r\n * Block '<S2>/id' : Unused code path elimination\r\n * Block '<S18>/Scope' : Unused code path elimination\r\n * Block '<S2>/iq' : Unused code path elimination\r\n * Block '<S75>/DTC_input_1' : Eliminate redundant data type conversion\r\n * Block '<S75>/DTC_output_1' : Eliminate redundant data type conversion\r\n * Block '<S76>/DTC_input_1' : Eliminate redundant data type conversion\r\n * Block '<S76>/DTC_output_1' : Eliminate redundant data type conversion\r\n * Block '<S2>/Manual Switch2' : Eliminated due to constant selection input\r\n * Block '<S81>/DTC_input_1' : Eliminate redundant data type conversion\r\n * Block '<S82>/DTC_input_1' : Eliminate redundant data type conversion\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('Copy_of_jiemeikang/FOC_Model')    - opens subsystem Copy_of_jiemeikang/FOC_Model\r\n * hilite_system('Copy_of_jiemeikang/FOC_Model/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'Copy_of_jiemeikang'\r\n * '<S1>'   : 'Copy_of_jiemeikang/FOC_Model'\r\n * '<S2>'   : 'Copy_of_jiemeikang/FOC_Model/Curr_loop'\r\n * '<S3>'   : 'Copy_of_jiemeikang/FOC_Model/Function-Call Generator'\r\n * '<S4>'   : 'Copy_of_jiemeikang/FOC_Model/LPF'\r\n * '<S5>'   : 'Copy_of_jiemeikang/FOC_Model/Speed_loop'\r\n * '<S6>'   : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/Chart1'\r\n * '<S7>'   : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/Clark'\r\n * '<S8>'   : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB'\r\n * '<S9>'   : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/If Action Subsystem'\r\n * '<S10>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/If Action Subsystem1'\r\n * '<S11>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/If Action Subsystem2'\r\n * '<S12>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/If Action Subsystem3'\r\n * '<S13>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/If Action Subsystem4'\r\n * '<S14>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/In_park'\r\n * '<S15>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/Park'\r\n * '<S16>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/SVPWM'\r\n * '<S17>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/Subsystem'\r\n * '<S18>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller'\r\n * '<S19>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL'\r\n * '<S20>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/Subsystem3'\r\n * '<S21>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller'\r\n * '<S22>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Subsystem'\r\n * '<S23>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Anti-windup'\r\n * '<S24>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/D Gain'\r\n * '<S25>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/External Derivative'\r\n * '<S26>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Filter'\r\n * '<S27>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Filter ICs'\r\n * '<S28>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/I Gain'\r\n * '<S29>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Ideal P Gain'\r\n * '<S30>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Ideal P Gain Fdbk'\r\n * '<S31>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Integrator'\r\n * '<S32>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Integrator ICs'\r\n * '<S33>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/N Copy'\r\n * '<S34>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/N Gain'\r\n * '<S35>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/P Copy'\r\n * '<S36>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Parallel P Gain'\r\n * '<S37>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Reset Signal'\r\n * '<S38>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Saturation'\r\n * '<S39>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Saturation Fdbk'\r\n * '<S40>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Sum'\r\n * '<S41>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Sum Fdbk'\r\n * '<S42>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Tracking Mode'\r\n * '<S43>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Tracking Mode Sum'\r\n * '<S44>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Tsamp - Integral'\r\n * '<S45>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Tsamp - Ngain'\r\n * '<S46>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/postSat Signal'\r\n * '<S47>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/preInt Signal'\r\n * '<S48>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/preSat Signal'\r\n * '<S49>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Anti-windup/Passthrough'\r\n * '<S50>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/D Gain/Disabled'\r\n * '<S51>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/External Derivative/Disabled'\r\n * '<S52>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Filter/Disabled'\r\n * '<S53>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Filter ICs/Disabled'\r\n * '<S54>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/I Gain/Internal Parameters'\r\n * '<S55>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Ideal P Gain/Passthrough'\r\n * '<S56>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Ideal P Gain Fdbk/Disabled'\r\n * '<S57>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Integrator/Discrete'\r\n * '<S58>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Integrator ICs/Internal IC'\r\n * '<S59>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/N Copy/Disabled wSignal Specification'\r\n * '<S60>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/N Gain/Disabled'\r\n * '<S61>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/P Copy/Disabled'\r\n * '<S62>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Parallel P Gain/Internal Parameters'\r\n * '<S63>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Reset Signal/Disabled'\r\n * '<S64>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Saturation/Enabled'\r\n * '<S65>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Saturation Fdbk/Disabled'\r\n * '<S66>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Sum/Sum_PI'\r\n * '<S67>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Sum Fdbk/Disabled'\r\n * '<S68>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Tracking Mode/Disabled'\r\n * '<S69>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Tracking Mode Sum/Passthrough'\r\n * '<S70>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Tsamp - Integral/TsSignalSpecification'\r\n * '<S71>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/Tsamp - Ngain/Passthrough'\r\n * '<S72>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/postSat Signal/Forward_Path'\r\n * '<S73>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/preInt Signal/Internal PreInt'\r\n * '<S74>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Discrete PID Controller/preSat Signal/Forward_Path'\r\n * '<S75>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Subsystem/Cos'\r\n * '<S76>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/FLUX_OB/PLL/Subsystem/Sin'\r\n * '<S77>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/If Action Subsystem4/If Action Subsystem'\r\n * '<S78>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/If Action Subsystem4/If Action Subsystem1'\r\n * '<S79>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/SVPWM/InvClark'\r\n * '<S80>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/SVPWM/ei_t'\r\n * '<S81>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/Subsystem/Cos'\r\n * '<S82>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/Subsystem/Sin'\r\n * '<S83>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1'\r\n * '<S84>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2'\r\n * '<S85>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Anti-windup'\r\n * '<S86>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/D Gain'\r\n * '<S87>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/External Derivative'\r\n * '<S88>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Filter'\r\n * '<S89>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Filter ICs'\r\n * '<S90>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/I Gain'\r\n * '<S91>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Ideal P Gain'\r\n * '<S92>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Ideal P Gain Fdbk'\r\n * '<S93>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Integrator'\r\n * '<S94>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Integrator ICs'\r\n * '<S95>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/N Copy'\r\n * '<S96>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/N Gain'\r\n * '<S97>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/P Copy'\r\n * '<S98>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Parallel P Gain'\r\n * '<S99>'  : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Reset Signal'\r\n * '<S100>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Saturation'\r\n * '<S101>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Saturation Fdbk'\r\n * '<S102>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Sum'\r\n * '<S103>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Sum Fdbk'\r\n * '<S104>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Tracking Mode'\r\n * '<S105>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Tracking Mode Sum'\r\n * '<S106>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Tsamp - Integral'\r\n * '<S107>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Tsamp - Ngain'\r\n * '<S108>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/postSat Signal'\r\n * '<S109>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/preInt Signal'\r\n * '<S110>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/preSat Signal'\r\n * '<S111>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Anti-windup/Disc. Clamping Parallel'\r\n * '<S112>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n * '<S113>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n * '<S114>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/D Gain/Disabled'\r\n * '<S115>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/External Derivative/Disabled'\r\n * '<S116>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Filter/Disabled'\r\n * '<S117>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Filter ICs/Disabled'\r\n * '<S118>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/I Gain/External Parameters'\r\n * '<S119>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Ideal P Gain/Passthrough'\r\n * '<S120>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Ideal P Gain Fdbk/Disabled'\r\n * '<S121>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Integrator/Discrete'\r\n * '<S122>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Integrator ICs/Internal IC'\r\n * '<S123>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/N Copy/Disabled wSignal Specification'\r\n * '<S124>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/N Gain/Disabled'\r\n * '<S125>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/P Copy/Disabled'\r\n * '<S126>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Parallel P Gain/External Parameters'\r\n * '<S127>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Reset Signal/Disabled'\r\n * '<S128>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Saturation/Enabled'\r\n * '<S129>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Saturation Fdbk/Disabled'\r\n * '<S130>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Sum/Sum_PI'\r\n * '<S131>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Sum Fdbk/Disabled'\r\n * '<S132>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Tracking Mode/Disabled'\r\n * '<S133>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Tracking Mode Sum/Passthrough'\r\n * '<S134>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Tsamp - Integral/TsSignalSpecification'\r\n * '<S135>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/Tsamp - Ngain/Passthrough'\r\n * '<S136>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/postSat Signal/Forward_Path'\r\n * '<S137>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/preInt Signal/Internal PreInt'\r\n * '<S138>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller1/preSat Signal/Forward_Path'\r\n * '<S139>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Anti-windup'\r\n * '<S140>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/D Gain'\r\n * '<S141>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/External Derivative'\r\n * '<S142>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Filter'\r\n * '<S143>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Filter ICs'\r\n * '<S144>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/I Gain'\r\n * '<S145>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Ideal P Gain'\r\n * '<S146>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Ideal P Gain Fdbk'\r\n * '<S147>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Integrator'\r\n * '<S148>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Integrator ICs'\r\n * '<S149>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/N Copy'\r\n * '<S150>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/N Gain'\r\n * '<S151>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/P Copy'\r\n * '<S152>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Parallel P Gain'\r\n * '<S153>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Reset Signal'\r\n * '<S154>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Saturation'\r\n * '<S155>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Saturation Fdbk'\r\n * '<S156>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Sum'\r\n * '<S157>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Sum Fdbk'\r\n * '<S158>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Tracking Mode'\r\n * '<S159>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Tracking Mode Sum'\r\n * '<S160>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Tsamp - Integral'\r\n * '<S161>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Tsamp - Ngain'\r\n * '<S162>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/postSat Signal'\r\n * '<S163>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/preInt Signal'\r\n * '<S164>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/preSat Signal'\r\n * '<S165>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Anti-windup/Disc. Clamping Parallel'\r\n * '<S166>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n * '<S167>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n * '<S168>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/D Gain/Disabled'\r\n * '<S169>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/External Derivative/Disabled'\r\n * '<S170>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Filter/Disabled'\r\n * '<S171>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Filter ICs/Disabled'\r\n * '<S172>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/I Gain/External Parameters'\r\n * '<S173>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Ideal P Gain/Passthrough'\r\n * '<S174>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Ideal P Gain Fdbk/Disabled'\r\n * '<S175>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Integrator/Discrete'\r\n * '<S176>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Integrator ICs/Internal IC'\r\n * '<S177>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/N Copy/Disabled wSignal Specification'\r\n * '<S178>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/N Gain/Disabled'\r\n * '<S179>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/P Copy/Disabled'\r\n * '<S180>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Parallel P Gain/External Parameters'\r\n * '<S181>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Reset Signal/Disabled'\r\n * '<S182>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Saturation/Enabled'\r\n * '<S183>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Saturation Fdbk/Disabled'\r\n * '<S184>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Sum/Sum_PI'\r\n * '<S185>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Sum Fdbk/Disabled'\r\n * '<S186>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Tracking Mode/Disabled'\r\n * '<S187>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Tracking Mode Sum/Passthrough'\r\n * '<S188>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Tsamp - Integral/TsSignalSpecification'\r\n * '<S189>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/Tsamp - Ngain/Passthrough'\r\n * '<S190>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/postSat Signal/Forward_Path'\r\n * '<S191>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/preInt Signal/Internal PreInt'\r\n * '<S192>' : 'Copy_of_jiemeikang/FOC_Model/Curr_loop/idq_Controller/PID Controller2/preSat Signal/Forward_Path'\r\n * '<S193>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3'\r\n * '<S194>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Anti-windup'\r\n * '<S195>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/D Gain'\r\n * '<S196>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/External Derivative'\r\n * '<S197>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Filter'\r\n * '<S198>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Filter ICs'\r\n * '<S199>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/I Gain'\r\n * '<S200>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Ideal P Gain'\r\n * '<S201>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Ideal P Gain Fdbk'\r\n * '<S202>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Integrator'\r\n * '<S203>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Integrator ICs'\r\n * '<S204>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/N Copy'\r\n * '<S205>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/N Gain'\r\n * '<S206>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/P Copy'\r\n * '<S207>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Parallel P Gain'\r\n * '<S208>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Reset Signal'\r\n * '<S209>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Saturation'\r\n * '<S210>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Saturation Fdbk'\r\n * '<S211>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Sum'\r\n * '<S212>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Sum Fdbk'\r\n * '<S213>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Tracking Mode'\r\n * '<S214>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Tracking Mode Sum'\r\n * '<S215>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Tsamp - Integral'\r\n * '<S216>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Tsamp - Ngain'\r\n * '<S217>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/postSat Signal'\r\n * '<S218>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/preInt Signal'\r\n * '<S219>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/preSat Signal'\r\n * '<S220>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Anti-windup/Disc. Clamping Parallel'\r\n * '<S221>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n * '<S222>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n * '<S223>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/D Gain/Disabled'\r\n * '<S224>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/External Derivative/Disabled'\r\n * '<S225>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Filter/Disabled'\r\n * '<S226>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Filter ICs/Disabled'\r\n * '<S227>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/I Gain/Internal Parameters'\r\n * '<S228>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Ideal P Gain/Passthrough'\r\n * '<S229>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Ideal P Gain Fdbk/Disabled'\r\n * '<S230>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Integrator/Discrete'\r\n * '<S231>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Integrator ICs/Internal IC'\r\n * '<S232>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/N Copy/Disabled wSignal Specification'\r\n * '<S233>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/N Gain/Disabled'\r\n * '<S234>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/P Copy/Disabled'\r\n * '<S235>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Parallel P Gain/Internal Parameters'\r\n * '<S236>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Reset Signal/External Reset'\r\n * '<S237>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Saturation/Enabled'\r\n * '<S238>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Saturation Fdbk/Disabled'\r\n * '<S239>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Sum/Sum_PI'\r\n * '<S240>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Sum Fdbk/Disabled'\r\n * '<S241>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Tracking Mode/Disabled'\r\n * '<S242>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Tracking Mode Sum/Passthrough'\r\n * '<S243>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Tsamp - Integral/TsSignalSpecification'\r\n * '<S244>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/Tsamp - Ngain/Passthrough'\r\n * '<S245>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/postSat Signal/Forward_Path'\r\n * '<S246>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/preInt Signal/Internal PreInt'\r\n * '<S247>' : 'Copy_of_jiemeikang/FOC_Model/Speed_loop/PID Controller3/preSat Signal/Forward_Path'\r\n */\r\n#endif                                 /* FOC_Model_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"FOC_Model_private.h","type":"header","group":"model","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: FOC_Model_private.h\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef FOC_Model_private_h_\r\n#define FOC_Model_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"FOC_Model.h\"\r\n#include \"FOC_Model_types.h\"\r\n#ifndef UCHAR_MAX\r\n#include <limits.h>\r\n#endif\r\n\r\n#if ( UCHAR_MAX != (0xFFU) ) || ( SCHAR_MAX != (0x7F) )\r\n#error Code was generated for compiler with different sized uchar/char. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( USHRT_MAX != (0xFFFFU) ) || ( SHRT_MAX != (0x7FFF) )\r\n#error Code was generated for compiler with different sized ushort/short. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( UINT_MAX != (0xFFFFFFFFU) ) || ( INT_MAX != (0x7FFFFFFF) )\r\n#error Code was generated for compiler with different sized uint/int. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( ULONG_MAX != (0xFFFFFFFFU) ) || ( LONG_MAX != (0x7FFFFFFF) )\r\n#error Code was generated for compiler with different sized ulong/long. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n/* Skipping ulong_long/long_long check: insufficient preprocessor integer range. */\r\nextern real32_T rt_modf_snf(real32_T u0, real32_T u1);\r\nextern void Clark(real32_T rtu_ia, real32_T rtu_ib, real32_T rtu_ic);\r\nextern void In_park(real32_T rtu_ud, real32_T rtu_uq, real32_T rtu_theta_sin,\r\n                    real32_T rtu_theta_cos);\r\nextern void Park(real32_T rtu_ialpha, real32_T rtu_ibeta, real32_T rtu_theta_sin,\r\n                 real32_T rtu_theta_cos, real32_T *rty_id, real32_T *rty_iq);\r\nextern void Curr_loop_Init(real32_T *rty_RestsSingal, DW_Curr_loop *localDW);\r\nextern void Curr_loop(real32_T rtu_ia, real32_T rtu_ib, real32_T rtu_ic, real_T\r\n                      rtu_MotorOnOff, real32_T rtu_iq_ref, real32_T rtu_VDC,\r\n                      real32_T rtyyy_Tcmp1Tcmp2Tcmp3[3], real32_T\r\n                      *rty_RestsSingal, DW_Curr_loop *localDW);\r\n\r\n#endif                                 /* FOC_Model_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"FOC_Model_types.h","type":"header","group":"model","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: FOC_Model_types.h\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef FOC_Model_types_h_\r\n#define FOC_Model_types_h_\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n#endif                                 /* FOC_Model_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"FLUX_OB.c","type":"source","group":"subsystem","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"子系统文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: FLUX_OB.c\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"FLUX_OB.h\"\r\n#include \"mw_cmsis.h\"\r\n#include <math.h>\r\n#include \"FOC_Model_private.h\"\r\n#include \"FOC_Model.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include <float.h>\r\n\r\nreal32_T rt_modf_snf(real32_T u0, real32_T u1)\r\n{\r\n  real32_T y;\r\n  y = u0;\r\n  if (u1 == 0.0F) {\r\n    if (u0 == 0.0F) {\r\n      y = u1;\r\n    }\r\n  } else if (rtIsNaNF(u0) || rtIsNaNF(u1) || rtIsInfF(u0)) {\r\n    y = (rtNaNF);\r\n  } else if (u0 == 0.0F) {\r\n    y = 0.0F / u1;\r\n  } else if (rtIsInfF(u1)) {\r\n    if ((u1 < 0.0F) != (u0 < 0.0F)) {\r\n      y = u1;\r\n    }\r\n  } else {\r\n    boolean_T yEq;\r\n    y = fmodf(u0, u1);\r\n    yEq = (y == 0.0F);\r\n    if ((!yEq) && (u1 > floorf(u1))) {\r\n      real32_T q;\r\n      q = fabsf(u0 / u1);\r\n      yEq = !(fabsf(q - floorf(q + 0.5F)) > FLT_EPSILON * q);\r\n    }\r\n\r\n    if (yEq) {\r\n      y = u1 * 0.0F;\r\n    } else if ((u0 < 0.0F) != (u1 < 0.0F)) {\r\n      y += u1;\r\n    }\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\n/* Output and update for atomic system: '<S2>/FLUX_OB' */\r\nvoid FLUX_OB(real32_T rtu_ialpha, real32_T rtu_ibeta, real32_T rtu_ualpha,\r\n             real32_T rtu_ubeta, real32_T *rty_theta, real32_T *rty_We,\r\n             DW_FLUX_OB *localDW)\r\n{\r\n  real32_T rtb_MatrixConcatenate[2];\r\n  real32_T rtb_MatrixConcatenate1[2];\r\n  real32_T rtb_MatrixConcatenate2[2];\r\n  real32_T rtb_MatrixConcatenate3[2];\r\n  real32_T rtb_Sum5[2];\r\n  real32_T tmp[2];\r\n  real32_T rtb_IntegralGain_b;\r\n  real32_T rtb_Product_h1;\r\n\r\n  /* SignalConversion generated from: '<S20>/Matrix Concatenate2' */\r\n  rtb_MatrixConcatenate2[0] = rtu_ialpha;\r\n\r\n  /* SignalConversion generated from: '<S20>/Matrix Concatenate2' */\r\n  rtb_MatrixConcatenate2[1] = rtu_ibeta;\r\n\r\n  /* Gain: '<S20>/Gain1' incorporates:\r\n   *  Concatenate: '<S20>/Matrix Concatenate2'\r\n   */\r\n  rtb_Product_h1 = -JIE_MEI_KANG_PARAMETER.L;\r\n  mw_arm_scale_1_f32(&rtb_Product_h1, &rtb_MatrixConcatenate2[0], &tmp[0], 2U);\r\n\r\n  /* Sum: '<S20>/Sum1' incorporates:\r\n   *  Delay: '<S20>/Delay'\r\n   *  Gain: '<S20>/Gain1'\r\n   *  Gain: '<S20>/Gain5'\r\n   */\r\n  mw_arm_add_f32(&tmp[0], &localDW->Delay_DSTATE[0], &rtb_MatrixConcatenate2[0],\r\n                 2U);\r\n\r\n  /* Math: '<S20>/Square' */\r\n  *rty_theta = rtb_MatrixConcatenate2[0] * rtb_MatrixConcatenate2[0];\r\n\r\n  /* Product: '<S20>/Product' incorporates:\r\n   *  Constant: '<S20>/Constant'\r\n   *  Constant: '<S20>/Constant1'\r\n   *  Gain: '<S20>/Gain2'\r\n   *  Math: '<S20>/Square1'\r\n   *  Math: '<S20>/Square2'\r\n   *  Sum: '<S20>/Sum2'\r\n   *  Sum: '<S20>/Sum3'\r\n   */\r\n  rtb_Product_h1 = (JIE_MEI_KANG_PARAMETE.FLUX * JIE_MEI_KANG_PARAMETE.FLUX -\r\n                    (rtb_MatrixConcatenate2[1] * rtb_MatrixConcatenate2[1] +\r\n                     *rty_theta)) * (0.5F * FLU_OBS.FLU);\r\n\r\n  /* SignalConversion generated from: '<S20>/Matrix Concatenate1' */\r\n  rtb_MatrixConcatenate1[0] = rtu_ualpha;\r\n\r\n  /* SignalConversion generated from: '<S20>/Matrix Concatenate1' */\r\n  rtb_MatrixConcatenate1[1] = rtu_ubeta;\r\n\r\n  /* SignalConversion generated from: '<S20>/Matrix Concatenate' */\r\n  rtb_MatrixConcatenate[0] = rtu_ialpha;\r\n\r\n  /* SignalConversion generated from: '<S20>/Matrix Concatenate' */\r\n  rtb_MatrixConcatenate[1] = rtu_ibeta;\r\n\r\n  /* Product: '<S20>/Product1' incorporates:\r\n   *  Gain: '<S20>/Gain5'\r\n   */\r\n  mw_arm_scale_2_f32(&rtb_MatrixConcatenate2[0], &rtb_Product_h1, &tmp[0], 2U);\r\n\r\n  /* Gain: '<S20>/Gain' incorporates:\r\n   *  Concatenate: '<S20>/Matrix Concatenate'\r\n   */\r\n  rtb_Product_h1 = -JIE_MEI_KANG_PARAMETER.Rs;\r\n  mw_arm_scale_1_f32(&rtb_Product_h1, &rtb_MatrixConcatenate[0],\r\n                     &rtb_MatrixConcatenate3[0], 2U);\r\n\r\n  /* Sum: '<S20>/Sum' incorporates:\r\n   *  Concatenate: '<S20>/Matrix Concatenate1'\r\n   *  Gain: '<S20>/Gain'\r\n   */\r\n  mw_arm_add_f32(&rtb_MatrixConcatenate3[0], &rtb_MatrixConcatenate1[0],\r\n                 &rtb_MatrixConcatenate[0], 2U);\r\n\r\n  /* Sum: '<S20>/Sum4' incorporates:\r\n   *  Product: '<S20>/Product1'\r\n   *  Sum: '<S20>/Sum'\r\n   */\r\n  mw_arm_add_f32(&tmp[0], &rtb_MatrixConcatenate[0], &rtb_MatrixConcatenate3[0],\r\n                 2U);\r\n\r\n  /* Gain: '<S20>/Gain3' incorporates:\r\n   *  Sum: '<S20>/Sum4'\r\n   */\r\n  mw_arm_scale_1_f32((real32_T *)&(Tp_loop.T), &rtb_MatrixConcatenate3[0], &tmp\r\n                     [0], 2U);\r\n\r\n  /* Sum: '<S20>/Sum5' incorporates:\r\n   *  Delay: '<S20>/Delay1'\r\n   *  Gain: '<S20>/Gain3'\r\n   */\r\n  mw_arm_add_f32(&tmp[0], &localDW->Delay1_DSTATE[0], &rtb_Sum5[0], 2U);\r\n\r\n  /* SignalConversion generated from: '<S20>/Matrix Concatenate3' */\r\n  rtb_MatrixConcatenate3[0] = rtu_ualpha;\r\n\r\n  /* SignalConversion generated from: '<S20>/Matrix Concatenate3' */\r\n  rtb_MatrixConcatenate3[1] = rtu_ubeta;\r\n\r\n  /* Gain: '<S20>/Gain5' */\r\n  rtb_Product_h1 = 1.0F / JIE_MEI_KANG_PARAMETE.FLUX;\r\n\r\n  /* Gain: '<S20>/Gain4' incorporates:\r\n   *  Concatenate: '<S20>/Matrix Concatenate3'\r\n   */\r\n  mw_arm_scale_1_f32((real32_T *)&(JIE_MEI_KANG_PARAMETER.L),\r\n                     &rtb_MatrixConcatenate3[0], &tmp[0], 2U);\r\n\r\n  /* Sum: '<S20>/Sum6' incorporates:\r\n   *  Gain: '<S20>/Gain4'\r\n   *  Sum: '<S20>/Sum5'\r\n   */\r\n  mw_arm_sub_f32(&rtb_Sum5[0], &tmp[0], &rtb_MatrixConcatenate3[0], 2U);\r\n\r\n  /* Gain: '<S20>/Gain5' incorporates:\r\n   *  Sum: '<S20>/Sum6'\r\n   */\r\n  mw_arm_scale_1_f32(&rtb_Product_h1, &rtb_MatrixConcatenate3[0],\r\n                     &rtb_MatrixConcatenate2[0], 2U);\r\n\r\n  /* Trigonometry: '<S76>/ReplicaOfSource' incorporates:\r\n   *  DiscreteIntegrator: '<S19>/Discrete-Time Integrator'\r\n   */\r\n  *rty_theta = sinf(localDW->DiscreteTimeIntegrator_DSTATE);\r\n\r\n  /* Product: '<S19>/Product' */\r\n  *rty_theta *= rtb_MatrixConcatenate2[0];\r\n\r\n  /* Sum: '<S19>/Sum' incorporates:\r\n   *  DiscreteIntegrator: '<S19>/Discrete-Time Integrator'\r\n   *  Product: '<S19>/Product1'\r\n   *  Trigonometry: '<S75>/ReplicaOfSource'\r\n   */\r\n  *rty_theta = cosf(localDW->DiscreteTimeIntegrator_DSTATE) *\r\n    rtb_MatrixConcatenate2[1] - *rty_theta;\r\n\r\n  /* Sum: '<S66>/Sum' incorporates:\r\n   *  DiscreteIntegrator: '<S57>/Integrator'\r\n   *  Gain: '<S62>/Proportional Gain'\r\n   */\r\n  *rty_We = 2121.0F * *rty_theta + localDW->Integrator_DSTATE;\r\n\r\n  /* Saturate: '<S64>/Saturation' */\r\n  if (*rty_We > 10000.0F) {\r\n    rtb_Product_h1 = 10000.0F;\r\n  } else if (*rty_We < -10000.0F) {\r\n    rtb_Product_h1 = -10000.0F;\r\n  } else {\r\n    rtb_Product_h1 = *rty_We;\r\n  }\r\n\r\n  /* End of Saturate: '<S64>/Saturation' */\r\n\r\n  /* Gain: '<S8>/Gain1' incorporates:\r\n   *  Gain: '<S8>/Gain'\r\n   */\r\n  *rty_We = 1.0F / JIE_MEI_KANG_PARAMETER.Pn * rtb_Product_h1 * 9.54929638F;\r\n\r\n  /* Gain: '<S54>/Integral Gain' */\r\n  rtb_IntegralGain_b = 250000.0F * *rty_theta;\r\n\r\n  /* Math: '<S8>/Mod' incorporates:\r\n   *  Constant: '<S8>/Constant1'\r\n   *  DiscreteIntegrator: '<S19>/Discrete-Time Integrator'\r\n   */\r\n  *rty_theta = rt_modf_snf(localDW->DiscreteTimeIntegrator_DSTATE, 6.28318548F);\r\n\r\n  /* Update for Delay: '<S20>/Delay' incorporates:\r\n   *  Sum: '<S20>/Sum5'\r\n   */\r\n  localDW->Delay_DSTATE[0] = rtb_Sum5[0];\r\n\r\n  /* Update for Delay: '<S20>/Delay1' incorporates:\r\n   *  Sum: '<S20>/Sum5'\r\n   */\r\n  localDW->Delay1_DSTATE[0] = rtb_Sum5[0];\r\n\r\n  /* Update for Delay: '<S20>/Delay' incorporates:\r\n   *  Sum: '<S20>/Sum5'\r\n   */\r\n  localDW->Delay_DSTATE[1] = rtb_Sum5[1];\r\n\r\n  /* Update for Delay: '<S20>/Delay1' incorporates:\r\n   *  Sum: '<S20>/Sum5'\r\n   */\r\n  localDW->Delay1_DSTATE[1] = rtb_Sum5[1];\r\n\r\n  /* Update for DiscreteIntegrator: '<S19>/Discrete-Time Integrator' */\r\n  localDW->DiscreteTimeIntegrator_DSTATE += 0.0001F * rtb_Product_h1;\r\n\r\n  /* Update for DiscreteIntegrator: '<S57>/Integrator' */\r\n  localDW->Integrator_DSTATE += 0.0001F * rtb_IntegralGain_b;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"FLUX_OB.h","type":"header","group":"subsystem","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"子系统文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: FLUX_OB.h\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef FLUX_OB_h_\r\n#define FLUX_OB_h_\r\n#ifndef FOC_Model_COMMON_INCLUDES_\r\n#define FOC_Model_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include \"math.h\"\r\n#endif                                 /* FOC_Model_COMMON_INCLUDES_ */\r\n\r\n#include \"rtGetNaN.h\"\r\n\r\n/* Block signals and states (default storage) for system '<S2>/FLUX_OB' */\r\ntypedef struct {\r\n  real32_T Delay_DSTATE[2];            /* '<S20>/Delay' */\r\n  real32_T Delay1_DSTATE[2];           /* '<S20>/Delay1' */\r\n  real32_T DiscreteTimeIntegrator_DSTATE;/* '<S19>/Discrete-Time Integrator' */\r\n  real32_T Integrator_DSTATE;          /* '<S57>/Integrator' */\r\n} DW_FLUX_OB;\r\n\r\nextern void FLUX_OB(real32_T rtu_ialpha, real32_T rtu_ibeta, real32_T rtu_ualpha,\r\n                    real32_T rtu_ubeta, real32_T *rty_theta, real32_T *rty_We,\r\n                    DW_FLUX_OB *localDW);\r\n\r\n#endif                                 /* FLUX_OB_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"SMO_LPF.c","type":"source","group":"subsystem","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"子系统文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: SMO_LPF.c\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"SMO_LPF.h\"\r\n#include \"FOC_Model_private.h\"\r\n\r\n/* Output and update for atomic system: '<S1>/LPF' */\r\nreal32_T SMO_LPF(real32_T rtu_obs_we, DW_SMO_LPF *localDW)\r\n{\r\n  real32_T rty_we_0;\r\n\r\n  /* Sum: '<S4>/Sum1' incorporates:\r\n   *  Constant: '<S4>/Constant'\r\n   *  Delay: '<S4>/Delay'\r\n   *  Product: '<S4>/Product'\r\n   *  Sum: '<S4>/Sum'\r\n   */\r\n  rty_we_0 = (rtu_obs_we - localDW->Delay_DSTATE) * 0.003F +\r\n    localDW->Delay_DSTATE;\r\n\r\n  /* Update for Delay: '<S4>/Delay' */\r\n  localDW->Delay_DSTATE = rty_we_0;\r\n  return rty_we_0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"SMO_LPF.h","type":"header","group":"subsystem","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"子系统文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: SMO_LPF.h\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef SMO_LPF_h_\r\n#define SMO_LPF_h_\r\n#ifndef FOC_Model_COMMON_INCLUDES_\r\n#define FOC_Model_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include \"math.h\"\r\n#endif                                 /* FOC_Model_COMMON_INCLUDES_ */\r\n\r\n/* Block signals and states (default storage) for system '<S1>/LPF' */\r\ntypedef struct {\r\n  real32_T Delay_DSTATE;               /* '<S4>/Delay' */\r\n} DW_SMO_LPF;\r\n\r\nextern real32_T SMO_LPF(real32_T rtu_obs_we, DW_SMO_LPF *localDW);\r\n\r\n#endif                                 /* SMO_LPF_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"SVPWM.c","type":"source","group":"subsystem","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"子系统文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: SVPWM.c\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"SVPWM.h\"\r\n#include <math.h>\r\n#include \"mw_cmsis.h\"\r\n#include \"FOC_Model.h\"\r\n#include \"FOC_Model_private.h\"\r\n\r\n/* Output and update for atomic system: '<S2>/SVPWM' */\r\nvoid SVPWM(real32_T rtu_Valpha, real32_T rtu_Vbeta, real32_T rtu_v_bus, real32_T\r\n           rty_tABC[3])\r\n{\r\n  real32_T tmp[3];\r\n  real32_T tmp_0[3];\r\n  real32_T rtb_Min;\r\n  real32_T rtb_Sum1_j;\r\n  real32_T rtb_Sum_b;\r\n\r\n  /* Gain: '<S79>/Gain' */\r\n  rtb_Min = -0.5F * rtu_Valpha;\r\n\r\n  /* Gain: '<S79>/Gain1' */\r\n  rtb_Sum1_j = 0.866025388F * rtu_Vbeta;\r\n\r\n  /* Sum: '<S79>/Sum' */\r\n  rtb_Sum_b = rtb_Min + rtb_Sum1_j;\r\n\r\n  /* Sum: '<S79>/Sum1' */\r\n  rtb_Sum1_j = rtb_Min - rtb_Sum1_j;\r\n\r\n  /* Gain: '<S80>/Gain' incorporates:\r\n   *  MinMax: '<S80>/Min'\r\n   *  MinMax: '<S80>/Min1'\r\n   *  Sum: '<S80>/Sum'\r\n   */\r\n  rtb_Min = (fminf(fminf(rtu_Valpha, rtb_Sum_b), rtb_Sum1_j) + fmaxf(fmaxf\r\n              (rtu_Valpha, rtb_Sum_b), rtb_Sum1_j)) * -0.5F;\r\n\r\n  /* Sum: '<S16>/Sum' */\r\n  rty_tABC[0] = rtb_Min + rtu_Valpha;\r\n  rty_tABC[1] = rtb_Min + rtb_Sum_b;\r\n  rty_tABC[2] = rtb_Min + rtb_Sum1_j;\r\n\r\n  /* Gain: '<S16>/Gain' */\r\n  mw_arm_scale_1_f32(&rtConstP.Gain_Gain_j, &rty_tABC[0], &tmp[0], 3U);\r\n\r\n  /* Sum: '<S16>/Sum1' incorporates:\r\n   *  Constant: '<S16>/Constant'\r\n   *  Gain: '<S16>/Gain'\r\n   *  Product: '<S16>/Divide'\r\n   */\r\n  tmp[0] /= rtu_v_bus;\r\n  tmp[1] /= rtu_v_bus;\r\n  tmp[2] /= rtu_v_bus;\r\n  mw_arm_bias_2_f32(&tmp[0], &rtConstP.pooled2, &tmp_0[0], 3U);\r\n\r\n  /* Gain: '<S16>/PWM_HalfPeriod' incorporates:\r\n   *  Sum: '<S16>/Sum1'\r\n   */\r\n  mw_arm_scale_1_f32(&rtConstP.pooled4, &tmp_0[0], &rty_tABC[0], 3U);\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"SVPWM.h","type":"header","group":"subsystem","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"子系统文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: SVPWM.h\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef SVPWM_h_\r\n#define SVPWM_h_\r\n#ifndef FOC_Model_COMMON_INCLUDES_\r\n#define FOC_Model_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include \"math.h\"\r\n#endif                                 /* FOC_Model_COMMON_INCLUDES_ */\r\n\r\nextern void SVPWM(real32_T rtu_Valpha, real32_T rtu_Vbeta, real32_T rtu_v_bus,\r\n                  real32_T rty_tABC[3]);\r\n\r\n#endif                                 /* SVPWM_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"idq_Controller.c","type":"source","group":"subsystem","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"子系统文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: idq_Controller.c\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"idq_Controller.h\"\r\n#include <math.h>\r\n#include \"FOC_Model_private.h\"\r\n#include \"FOC_Model.h\"\r\n\r\n/* Output and update for atomic system: '<S2>/idq_Controller' */\r\nvoid idq_Controller(real32_T rtu_id_fdbk, real32_T rtu_iq_fdbk, real32_T\r\n                    rtu_iq_ref, real32_T *rty_ud_ref, real32_T *rty_uq_ref,\r\n                    DW_idq_Controller *localDW)\r\n{\r\n  real32_T rtb_IProdOut;\r\n  real32_T rtb_Integrator_e;\r\n  real32_T rtb_Sum_i;\r\n  real32_T rtb_Sum_n;\r\n  int16_T rtb_IProdOut_p;\r\n  int8_T tmp;\r\n  int8_T tmp_0;\r\n  boolean_T rtb_AND3_g;\r\n\r\n  /* Sum: '<S130>/Sum' incorporates:\r\n   *  Constant: '<S18>/Constant'\r\n   *  Constant: '<S18>/Constant3'\r\n   *  DiscreteIntegrator: '<S121>/Integrator'\r\n   *  Product: '<S126>/PProd Out'\r\n   *  Sum: '<S18>/Sum1'\r\n   */\r\n  rtb_Sum_n = (0.0F - rtu_id_fdbk) * curr_kpki.curr_d_kp + (real32_T)\r\n    localDW->Integrator_DSTATE_f * 0.0001F;\r\n\r\n  /* DeadZone: '<S113>/DeadZone' */\r\n  if (rtb_Sum_n > 12.4707661F) {\r\n    rtb_Integrator_e = rtb_Sum_n - 12.4707661F;\r\n  } else if (rtb_Sum_n >= -12.4707661F) {\r\n    rtb_Integrator_e = 0.0F;\r\n  } else {\r\n    rtb_Integrator_e = rtb_Sum_n - -12.4707661F;\r\n  }\r\n\r\n  /* End of DeadZone: '<S113>/DeadZone' */\r\n\r\n  /* Product: '<S118>/IProd Out' incorporates:\r\n   *  Constant: '<S18>/Constant'\r\n   *  Constant: '<S18>/Constant4'\r\n   *  Sum: '<S18>/Sum1'\r\n   */\r\n  rtb_IProdOut_p = (int16_T)floorf((0.0F - rtu_id_fdbk) * curr_kpki.curr_d_ki);\r\n\r\n  /* Switch: '<S111>/Switch1' incorporates:\r\n   *  Constant: '<S111>/Constant'\r\n   *  Constant: '<S111>/Constant2'\r\n   *  RelationalOperator: '<S111>/fix for DT propagation issue'\r\n   */\r\n  if (rtb_Integrator_e > 0.0F) {\r\n    tmp = 1;\r\n  } else {\r\n    tmp = -1;\r\n  }\r\n\r\n  /* Switch: '<S111>/Switch2' incorporates:\r\n   *  Constant: '<S111>/Clamping_zero'\r\n   *  Constant: '<S111>/Constant3'\r\n   *  Constant: '<S111>/Constant4'\r\n   *  RelationalOperator: '<S111>/fix for DT propagation issue1'\r\n   */\r\n  if (rtb_IProdOut_p > 0) {\r\n    tmp_0 = 1;\r\n  } else {\r\n    tmp_0 = -1;\r\n  }\r\n\r\n  /* Logic: '<S111>/AND3' incorporates:\r\n   *  RelationalOperator: '<S111>/Equal1'\r\n   *  RelationalOperator: '<S111>/Relational Operator'\r\n   *  Switch: '<S111>/Switch1'\r\n   *  Switch: '<S111>/Switch2'\r\n   */\r\n  rtb_AND3_g = ((rtb_Integrator_e != 0.0F) && (tmp == tmp_0));\r\n\r\n  /* Sum: '<S18>/Sum7' */\r\n  rtb_Integrator_e = rtu_iq_ref - rtu_iq_fdbk;\r\n\r\n  /* Product: '<S172>/IProd Out' incorporates:\r\n   *  Constant: '<S18>/Constant4'\r\n   */\r\n  rtb_IProdOut = rtb_Integrator_e * curr_kpki.curr_d_ki;\r\n\r\n  /* Sum: '<S184>/Sum' incorporates:\r\n   *  Constant: '<S18>/Constant3'\r\n   *  DiscreteIntegrator: '<S175>/Integrator'\r\n   *  Product: '<S180>/PProd Out'\r\n   */\r\n  rtb_Sum_i = rtb_Integrator_e * curr_kpki.curr_d_kp +\r\n    localDW->Integrator_DSTATE;\r\n\r\n  /* DeadZone: '<S167>/DeadZone' incorporates:\r\n   *  Saturate: '<S182>/Saturation'\r\n   */\r\n  if (rtb_Sum_i > 12.4707661F) {\r\n    rtb_Integrator_e = rtb_Sum_i - 12.4707661F;\r\n    *rty_uq_ref = 12.4707661F;\r\n  } else {\r\n    if (rtb_Sum_i >= -12.4707661F) {\r\n      rtb_Integrator_e = 0.0F;\r\n    } else {\r\n      rtb_Integrator_e = rtb_Sum_i - -12.4707661F;\r\n    }\r\n\r\n    if (rtb_Sum_i < -12.4707661F) {\r\n      *rty_uq_ref = -12.4707661F;\r\n    } else {\r\n      *rty_uq_ref = rtb_Sum_i;\r\n    }\r\n  }\r\n\r\n  /* End of DeadZone: '<S167>/DeadZone' */\r\n\r\n  /* Saturate: '<S128>/Saturation' */\r\n  if (rtb_Sum_n > 12.4707661F) {\r\n    *rty_ud_ref = 12.4707661F;\r\n  } else if (rtb_Sum_n < -12.4707661F) {\r\n    *rty_ud_ref = -12.4707661F;\r\n  } else {\r\n    *rty_ud_ref = rtb_Sum_n;\r\n  }\r\n\r\n  /* End of Saturate: '<S128>/Saturation' */\r\n\r\n  /* Switch: '<S111>/Switch' incorporates:\r\n   *  Constant: '<S111>/Constant1'\r\n   */\r\n  if (rtb_AND3_g) {\r\n    rtb_IProdOut_p = 0;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S121>/Integrator' incorporates:\r\n   *  Switch: '<S111>/Switch'\r\n   */\r\n  localDW->Integrator_DSTATE_f += rtb_IProdOut_p;\r\n\r\n  /* Switch: '<S165>/Switch1' incorporates:\r\n   *  Constant: '<S165>/Clamping_zero'\r\n   *  Constant: '<S165>/Constant'\r\n   *  Constant: '<S165>/Constant2'\r\n   *  RelationalOperator: '<S165>/fix for DT propagation issue'\r\n   */\r\n  if (rtb_Integrator_e > 0.0F) {\r\n    tmp = 1;\r\n  } else {\r\n    tmp = -1;\r\n  }\r\n\r\n  /* Switch: '<S165>/Switch2' incorporates:\r\n   *  Constant: '<S165>/Clamping_zero'\r\n   *  Constant: '<S165>/Constant3'\r\n   *  Constant: '<S165>/Constant4'\r\n   *  RelationalOperator: '<S165>/fix for DT propagation issue1'\r\n   */\r\n  if (rtb_IProdOut > 0.0F) {\r\n    tmp_0 = 1;\r\n  } else {\r\n    tmp_0 = -1;\r\n  }\r\n\r\n  /* Switch: '<S165>/Switch' incorporates:\r\n   *  Constant: '<S165>/Clamping_zero'\r\n   *  Constant: '<S165>/Constant1'\r\n   *  Logic: '<S165>/AND3'\r\n   *  RelationalOperator: '<S165>/Equal1'\r\n   *  RelationalOperator: '<S165>/Relational Operator'\r\n   *  Switch: '<S165>/Switch1'\r\n   *  Switch: '<S165>/Switch2'\r\n   */\r\n  if ((rtb_Integrator_e != 0.0F) && (tmp == tmp_0)) {\r\n    rtb_IProdOut = 0.0F;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S175>/Integrator' incorporates:\r\n   *  Switch: '<S165>/Switch'\r\n   */\r\n  localDW->Integrator_DSTATE += 0.0001F * rtb_IProdOut;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"idq_Controller.h","type":"header","group":"subsystem","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"子系统文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: idq_Controller.h\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef idq_Controller_h_\r\n#define idq_Controller_h_\r\n#ifndef FOC_Model_COMMON_INCLUDES_\r\n#define FOC_Model_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include \"math.h\"\r\n#endif                                 /* FOC_Model_COMMON_INCLUDES_ */\r\n\r\n/* Block signals and states (default storage) for system '<S2>/idq_Controller' */\r\ntypedef struct {\r\n  real32_T Integrator_DSTATE;          /* '<S175>/Integrator' */\r\n  int16_T Integrator_DSTATE_f;         /* '<S121>/Integrator' */\r\n} DW_idq_Controller;\r\n\r\nextern void idq_Controller(real32_T rtu_id_fdbk, real32_T rtu_iq_fdbk, real32_T\r\n  rtu_iq_ref, real32_T *rty_ud_ref, real32_T *rty_uq_ref, DW_idq_Controller\r\n  *localDW);\r\n\r\n#endif                                 /* idq_Controller_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"FOC_Model_data.c","type":"source","group":"data","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"数据文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: FOC_Model_data.c\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"FOC_Model.h\"\r\n\r\n/* Constant parameters (default storage) */\r\nconst ConstP rtConstP = {\r\n  /* Pooled Parameter (Mixed Expressions)\r\n   * Referenced by:\r\n   *   '<S10>/Constant1'\r\n   *   '<S11>/Constant2'\r\n   *   '<S13>/Constant2'\r\n   *   '<S16>/Constant'\r\n   *   '<S20>/Gain2'\r\n   */\r\n  0.5F,\r\n\r\n  /* Pooled Parameter (Mixed Expressions)\r\n   * Referenced by:\r\n   *   '<S16>/PWM_HalfPeriod'\r\n   *   '<S64>/Saturation'\r\n   */\r\n  10000.0F,\r\n\r\n  /* Computed Parameter: Gain_Gain_j\r\n   * Referenced by: '<S16>/Gain'\r\n   */\r\n  -1.0F\r\n};\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetNaN.c","type":"source","group":"utility","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtGetNaN.c\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rtGetNaN.h\"\r\n\r\n/* Return rtNaN needed by the generated code. */\r\nreal_T rtGetNaN(void)\r\n{\r\n  return rtNaN;\r\n}\r\n\r\n/* Return rtNaNF needed by the generated code. */\r\nreal32_T rtGetNaNF(void)\r\n{\r\n  return rtNaNF;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetNaN.h","type":"header","group":"utility","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtGetNaN.h\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rtGetNaN_h_\r\n#define rtGetNaN_h_\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtGetNaN(void);\r\nextern real32_T rtGetNaNF(void);\r\n\r\n#endif                                 /* rtGetNaN_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rt_nonfinite.c","type":"source","group":"utility","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rt_nonfinite.c\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include \"math.h\"\r\n\r\nreal_T rtNaN = -(real_T)NAN;\r\nreal_T rtInf = (real_T)INFINITY;\r\nreal_T rtMinusInf = -(real_T)INFINITY;\r\nreal32_T rtNaNF = -(real32_T)NAN;\r\nreal32_T rtInfF = (real32_T)INFINITY;\r\nreal32_T rtMinusInfF = -(real32_T)INFINITY;\r\n\r\n/* Test if value is infinite */\r\nboolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)isinf(value);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nboolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)isinf(value);\r\n}\r\n\r\n/* Test if value is not a number */\r\nboolean_T rtIsNaN(real_T value)\r\n{\r\n  return (boolean_T)(isnan(value) != 0);\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nboolean_T rtIsNaNF(real32_T value)\r\n{\r\n  return (boolean_T)(isnan(value) != 0);\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rt_nonfinite.h","type":"header","group":"utility","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rt_nonfinite.h\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rt_nonfinite_h_\r\n#define rt_nonfinite_h_\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nextern boolean_T rtIsInf(real_T value);\r\nextern boolean_T rtIsInfF(real32_T value);\r\nextern boolean_T rtIsNaN(real_T value);\r\nextern boolean_T rtIsNaNF(real32_T value);\r\n\r\n#endif                                 /* rt_nonfinite_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'FOC_Model'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Nov 12 14:52:50 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"mw_cmsis.h","type":"header","group":"other","path":"C:\\Users\\18225\\Desktop\\BLDC_BRULESS\\jiemeikang\\FOC_Model_ert_rtw","tag":"","groupDisplay":"其他文件","code":"/* Copyright 2015-2023 The MathWorks, Inc. */\n\n/****************************************************\n*                                                   *   \n* Wrapper functions for CMSIS functions             *\n*                                                   *  \n****************************************************/\n\n#ifndef MW_CMSIS_H\n#define MW_CMSIS_H\n\n#include \"arm_math.h\"\n#include \"rtwtypes.h\"\n\n#define mw_arm_vlog_f32(pSrc, pDst, blockSize) arm_vlog_f32((float32_t *)pSrc, (float32_t *)pDst, blockSize)\n#define mw_arm_vexp_f32(pSrc, pDst, blockSize) arm_vexp_f32((float32_t *)pSrc, (float32_t *)pDst, blockSize)\n\n#define mw_arm_abs_f32(pSrc, pDst, blockSize) arm_abs_f32((float32_t *)pSrc, (float32_t *)pDst, blockSize)\n#define mw_arm_abs_q7(pSrc, pDst, blockSize) arm_abs_q7((q7_t *)pSrc, (q7_t *)pDst, blockSize) \n#define mw_arm_abs_q15(pSrc, pDst, blockSize) arm_abs_q15((q15_t *)pSrc, (q15_t *)pDst, blockSize) \n#define mw_arm_abs_q31(pSrc, pDst, blockSize) arm_abs_q31((q31_t *)pSrc, (q31_t *)pDst, blockSize) \n\n#define mw_arm_sqrt_f32(pIn, pOut, blockSize) {\\\nif ((blockSize) == 1) { \\\n    arm_sqrt_f32(*(pIn), (pOut)); \\\n} else { \\\n    uint32_t i;\\\n    float32_t *pInput, *pOutput;\\\n    pInput = (float32_t *)pIn;\\\n    pOutput = (float32_t *)pOut;\\\n    for(i=0;i<blockSize;i++){\\\n        arm_sqrt_f32((float32_t)pInput[i],pOutput);\\\n        pOutput++;}\\\n    }\\\n}\n\n#define mw_arm_float_to_q31(pSrc, pDst, blockSize) arm_float_to_q31((float32_t *)pSrc, (q31_t *)pDst, blockSize)\n#define mw_arm_float_to_q15(pSrc, pDst, blockSize) arm_float_to_q15((float32_t *)pSrc, (q15_t *)pDst, blockSize)\n#define mw_arm_float_to_q7(pSrc, pDst, blockSize) arm_float_to_q7((float32_t *)pSrc, (q7_t *)pDst, blockSize)\n\n#define mw_arm_q15_to_float(pSrc, pDst, blockSize) arm_q15_to_float((q15_t *)pSrc, (float32_t *)pDst, blockSize)\n#define mw_arm_q15_to_q31(pSrc, pDst, blockSize) arm_q15_to_q31((q15_t *)pSrc, (q31_t *)pDst, blockSize)\n#define mw_arm_q15_to_q7(pSrc, pDst, blockSize) arm_q15_to_q7((q15_t *)pSrc, (q7_t *)pDst, blockSize)\n\n#define mw_arm_q31_to_float(pSrc, pDst, blockSize) arm_q31_to_float((q31_t *)pSrc, (float32_t *)pDst, blockSize)\n#define mw_arm_q31_to_q15(pSrc, pDst, blockSize) arm_q31_to_q15((q31_t *)pSrc, (q15_t *)pDst, blockSize)\n#define mw_arm_q31_to_q7(pSrc, pDst, blockSize) arm_q31_to_q7((q31_t *)pSrc, (q7_t *)pDst, blockSize)\n\n#define mw_arm_q7_to_float(pSrc, pDst, blockSize) arm_q7_to_float((q7_t *)pSrc, (float32_t *)pDst, blockSize)\n#define mw_arm_q7_to_q31(pSrc, pDst, blockSize) arm_q7_to_q31((q7_t *)pSrc, (q31_t *)pDst, blockSize)\n#define mw_arm_q7_to_q15(pSrc, pDst, blockSize) arm_q7_to_q15((q7_t *)pSrc, (q15_t *)pDst, blockSize)\n\n#define mw_arm_add_f32(pSrcA, pSrcB, pDst, blockSize) arm_add_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\n#define mw_arm_add_q31(pSrcA, pSrcB, pDst, blockSize) arm_add_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\n#define mw_arm_add_q15(pSrcA, pSrcB, pDst, blockSize) arm_add_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\n#define mw_arm_add_q7(pSrcA, pSrcB, pDst, blockSize)  arm_add_q7((q7_t *)pSrcA, (q7_t *)pSrcB, (q7_t *)pDst, blockSize)\n\n#define mw_arm_sub_f32(pSrcA, pSrcB, pDst, blockSize) arm_sub_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\n#define mw_arm_sub_q31(pSrcA, pSrcB, pDst, blockSize) arm_sub_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\n#define mw_arm_sub_q15(pSrcA, pSrcB, pDst, blockSize) arm_sub_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\n#define mw_arm_sub_q7(pSrcA, pSrcB, pDst, blockSize)  arm_sub_q7((q7_t *)pSrcA, (q7_t *)pSrcB, (q7_t *)pDst, blockSize)\n\n#define mw_arm_mult_f32(pSrcA, pSrcB, pDst, blockSize) arm_mult_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\n#define mw_arm_mult_q31(pSrcA, pSrcB, pDst, blockSize) arm_mult_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\n#define mw_arm_mult_q15(pSrcA, pSrcB, pDst, blockSize) arm_mult_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\n#define mw_arm_mult_q7(pSrcA, pSrcB, pDst, blockSize)  arm_mult_q7((q7_t *)pSrcA, (q7_t *)pSrcB, (q7_t *)pDst, blockSize)\n\n#define mw_arm_cmplx_conj_f32(pSrc, pDst, numSamples) arm_cmplx_conj_f32((float32_t *)pSrc, (float32_t *)pDst, numSamples)\n#define mw_arm_cmplx_conj_q31(pSrc, pDst, numSamples) arm_cmplx_conj_q31((q31_t *)pSrc, (q31_t *)pDst, numSamples)\n#define mw_arm_cmplx_conj_q15(pSrc, pDst, numSamples) arm_cmplx_conj_q15((q15_t *)pSrc, (q15_t *)pDst, numSamples)\n\n#define mw_arm_cmplx_mult_cmplx_f32(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_cmplx_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\n#define mw_arm_cmplx_mult_cmplx_q31(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_cmplx_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\n#define mw_arm_cmplx_mult_cmplx_q15(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_cmplx_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\n\n#define mw_arm_cmplx_mult_real_f32(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_real_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\n#define mw_arm_cmplx_mult_real_q31(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_real_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\n#define mw_arm_cmplx_mult_real_q15(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_real_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\n\n#define mw_arm_rshift_q15(pSrc, shiftBits, pDst, blockSize) arm_shift_q15 ((q15_t *)pSrc, -(shiftBits),(q15_t *)pDst, blockSize)\n#define mw_arm_rshift_q31(pSrc, shiftBits, pDst, blockSize) arm_shift_q31 ((q31_t *)pSrc, -(shiftBits), (q31_t *)pDst, blockSize)\n#define mw_arm_rshift_q7(pSrc, shiftBits, pDst, blockSize) arm_shift_q7 ((q7_t *)pSrc,  -(shiftBits), (q7_t *)pDst, blockSize)\n\n#define mw_arm_shift_q15(pSrc, shiftBits, pDst, blockSize) arm_shift_q15 ((q15_t *)pSrc, shiftBits,(q15_t *)pDst, blockSize)\n#define mw_arm_shift_q31(pSrc, shiftBits, pDst, blockSize) arm_shift_q31 ((q31_t *)pSrc, shiftBits, (q31_t *)pDst, blockSize)\n#define mw_arm_shift_q7(pSrc, shiftBits, pDst, blockSize) arm_shift_q7 ((q7_t *)pSrc, shiftBits, (q7_t *)pDst, blockSize)\n\n#define mw_arm_scale_1_f32(scaleValue, pSrc, pDst, blockSize) arm_scale_f32 ((float32_t *)pSrc, *scaleValue, (float32_t *)pDst, blockSize)\n#define mw_arm_scale_1_q7(scaleValue, pSrc, pDst, blockSize, scaleShift) arm_scale_q7 ((q7_t *)pSrc, *scaleValue, scaleShift, (q7_t *)pDst, blockSize)\n#define mw_arm_scale_1_q15(scaleValue, pSrc, pDst, blockSize, scaleShift) arm_scale_q15 ((q15_t *)pSrc, *scaleValue, scaleShift, (q15_t *)pDst, blockSize)\n#define mw_arm_scale_1_q31(scaleValue, pSrc, pDst, blockSize, scaleShift) arm_scale_q31 ((q31_t *)pSrc, *scaleValue, scaleShift, (q31_t *)pDst, blockSize)\n\n#define mw_arm_scale_2_f32(pSrc, scaleValue, pDst, blockSize) arm_scale_f32 ((float32_t *)pSrc, *scaleValue, (float32_t *)pDst, blockSize)\n#define mw_arm_scale_2_q7(pSrc, scaleValue, pDst, blockSize, scaleShift) arm_scale_q7 ((q7_t *)pSrc, *scaleValue, scaleShift, (q7_t *)pDst, blockSize)\n#define mw_arm_scale_2_q15(pSrc, scaleValue, pDst, blockSize, scaleShift) arm_scale_q15 ((q15_t *)pSrc, *scaleValue, scaleShift, (q15_t *)pDst, blockSize)\n#define mw_arm_scale_2_q31(pSrc, scaleValue, pDst, blockSize, scaleShift) arm_scale_q31 ((q31_t *)pSrc, *scaleValue, scaleShift, (q31_t *)pDst, blockSize)\n\n#define mw_arm_bias_1_f32(biasValue, pSrc, pDst, blockSize) arm_offset_f32 ((float32_t *)pSrc, *biasValue, (float32_t *)pDst, blockSize)\n#define mw_arm_bias_1_q7(biasValue, pSrc, pDst, blockSize) arm_offset_q7 ((q7_t *)pSrc, *biasValue, (q7_t *)pDst, blockSize)\n#define mw_arm_bias_1_q15(biasValue, pSrc, pDst, blockSize) arm_offset_q15 ((q15_t *)pSrc, *biasValue, (q15_t *)pDst, blockSize)\n#define mw_arm_bias_1_q31(biasValue, pSrc, pDst, blockSize) arm_offset_q31 ((q31_t *)pSrc, *biasValue, (q31_t *)pDst, blockSize)\n\n#define mw_arm_bias_2_f32(pSrc, biasValue, pDst, blockSize) arm_offset_f32 ((float32_t *)pSrc, *biasValue, (float32_t *)pDst, blockSize)\n#define mw_arm_bias_2_q7(pSrc, biasValue, pDst, blockSize) arm_offset_q7 ((q7_t *)pSrc, *biasValue, (q7_t *)pDst, blockSize)\n#define mw_arm_bias_2_q15(pSrc, biasValue, pDst, blockSize) arm_offset_q15 ((q15_t *)pSrc, *biasValue, (q15_t *)pDst, blockSize)\n#define mw_arm_bias_2_q31(pSrc, biasValue, pDst, blockSize) arm_offset_q31 ((q31_t *)pSrc, *biasValue, (q31_t *)pDst, blockSize)\n\n#define mw_arm_dot_prod_f32(pSrcA, pSrcB, pDst, blockSize) arm_dot_prod_f32 ((float32_t *)pSrcA,  (float32_t *)pSrcB, blockSize, (float32_t *)pDst)\n#define mw_arm_dot_prod_q7(pSrcA, pSrcB, pDst, blockSize) arm_dot_prod_q7 ((q7_t *)pSrcA,  (q7_t *)pSrcB, blockSize, (q31_t *)(pDst))\n#define mw_arm_dot_prod_q15(pSrcA, pSrcB, pDst, blockSize) arm_dot_prod_q15 ((q15_t *)pSrcA, (q15_t *) pSrcB, blockSize, (q63_t *) (pDst))\n#define mw_arm_dot_prod_q31(pSrcA, pSrcB, pDst, blockSize) arm_dot_prod_q31 ((q31_t *)pSrcA,  (q31_t *)pSrcB, blockSize, (q63_t *)(pDst))\n\n#define mw_arm_saturate_q15(pSrcIn, pSrcMin, pSrcMax, pDst, blockSize) arm_clip_q15 ((q15_t *)pSrcIn, (q15_t *)pDst, (q15_t)(*pSrcMin), (q15_t)(*pSrcMax), blockSize)\n#define mw_arm_saturate_q31(pSrcIn, pSrcMin, pSrcMax, pDst, blockSize) arm_clip_q31 ((q31_t *)pSrcIn, (q31_t *)pDst, (q31_t)(*pSrcMin), (q31_t)(*pSrcMax), blockSize)\n#define mw_arm_saturate_q7(pSrcIn, pSrcMin, pSrcMax, pDst, blockSize) arm_clip_q7 ((q7_t *)pSrcIn, (q7_t *)pDst, (q7_t)(*pSrcMin), (q7_t)(*pSrcMax), blockSize)\n#define mw_arm_saturate_f32(pSrcIn, pSrcMin, pSrcMax, pDst, blockSize) arm_clip_f32 ((float32_t *)pSrcIn, (float32_t *)pDst, *pSrcMin, *pSrcMax, blockSize)\n\n#define mw_arm_uminus_f32(pSrc, pDst, blockSize) arm_negate_f32((float32_t *)pSrc, (float32_t *)pDst, blockSize)\n#define mw_arm_uminus_q31(pSrc, pDst, blockSize) arm_negate_q31((q31_t *)pSrc, (q31_t *)pDst, blockSize)\n#define mw_arm_uminus_q15(pSrc, pDst, blockSize) arm_negate_q15((q15_t *)pSrc, (q15_t *)pDst, blockSize)\n#define mw_arm_uminus_q7(pSrc, pDst, blockSize)  arm_negate_q7((q7_t *)pSrc, (q7_t *)pDst, blockSize)\n\n#define mw_arm_and_uint32(pSrcA, pSrcB, pDst, blockSize) arm_and_u32((uint32_t *)(uint32_t *)pSrcA, (uint32_t *)pSrcB, (uint32_t *)pDst, blockSize)\n#define mw_arm_and_uint16(pSrcA, pSrcB, pDst, blockSize) arm_and_u16((uint16_t *)pSrcA, (uint16_t *)pSrcB, (uint16_t *)pDst, blockSize)\n#define mw_arm_and_uint8(pSrcA, pSrcB, pDst, blockSize) arm_and_u8((uint8_t *)pSrcA, (uint8_t *)pSrcB, (uint8_t *)pDst, blockSize)\n\n#define mw_arm_or_uint32(pSrcA, pSrcB, pDst, blockSize) arm_or_u32((uint32_t *)pSrcA, (uint32_t *)pSrcB, (uint32_t *)pDst, blockSize)\n#define mw_arm_or_uint16(pSrcA, pSrcB, pDst, blockSize) arm_or_u16((uint16_t *)pSrcA, (uint16_t *)pSrcB, (uint16_t *)pDst, blockSize)\n#define mw_arm_or_uint8(pSrcA, pSrcB, pDst, blockSize) arm_or_u8((uint8_t *)pSrcA, (uint8_t *)pSrcB, (uint8_t *)pDst, blockSize)\n\n#define mw_arm_xor_uint32(pSrcA, pSrcB, pDst, blockSize) arm_xor_u32((uint32_t *)pSrcA, (uint32_t *)pSrcB, (uint32_t *)pDst, blockSize)\n#define mw_arm_xor_uint16(pSrcA, pSrcB, pDst, blockSize) arm_xor_u16((uint16_t *)pSrcA, (uint16_t *)pSrcB, (uint16_t *)pDst, blockSize)\n#define mw_arm_xor_uint8(pSrcA, pSrcB, pDst, blockSize) arm_xor_u8((uint8_t *)pSrcA, (uint8_t *)pSrcB, (uint8_t *)pDst, blockSize)\n\n#define mw_arm_not_uint32(pSrc, pDst, blockSize) arm_not_u32((uint32_t *)pSrc, (uint32_t *)pDst, blockSize)\n#define mw_arm_not_uint16(pSrc, pDst, blockSize) arm_not_u16((uint16_t *)pSrc, (uint16_t *)pDst, blockSize)\n#define mw_arm_not_uint8(pSrc, pDst, blockSize) arm_not_u8((uint8_t *)pSrc, (uint8_t *)pDst, blockSize)\n\n#define mw_arm_saturate_q15(pSrcIn, pSrcMin, pSrcMax, pDst, blockSize) arm_clip_q15 ((q15_t *)pSrcIn, (q15_t *)pDst, (q15_t)(*pSrcMin), (q15_t)(*pSrcMax), blockSize)\n#define mw_arm_saturate_q31(pSrcIn, pSrcMin, pSrcMax, pDst, blockSize) arm_clip_q31 ((q31_t *)pSrcIn, (q31_t *)pDst, (q31_t)(*pSrcMin), (q31_t)(*pSrcMax), blockSize)\n#define mw_arm_saturate_q7(pSrcIn, pSrcMin, pSrcMax, pDst, blockSize) arm_clip_q7 ((q7_t *)pSrcIn, (q7_t *)pDst, (q7_t)(*pSrcMin), (q7_t)(*pSrcMax), blockSize)\n#define mw_arm_saturate_f32(pSrcIn, pSrcMin, pSrcMax, pDst, blockSize) arm_clip_f32 ((float32_t *)pSrcIn, (float32_t *)pDst, *pSrcMin, *pSrcMax, blockSize)\n\n#endif\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};